{"version":3,"sources":["pages/Lesson-14/index.js","pages/Lesson-14/code.js","components/Link/index.js","components/Image/index.js"],"names":["Lesson14","className","text","theme","hybrid","language","Image","filename","Link","link","href","target","rel","src","process","alt","loading"],"mappings":"oKAsMeA,UA/LE,kBACf,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yFACA,kgBAEyB,uCAFzB,8+BAOA,2BACE,oFADF,q+BAMA,skBAEmC,8CAFnC,MAIA,0dAIA,kBAAC,IAAD,CAAWC,KCjCD,0PDiCmBC,MAAOC,IAAQC,SAAS,QAErD,6SACA,kBAAC,IAAD,CAAWH,KCpBD,osBDoBmBC,MAAOC,IAAQC,SAAS,QAErD,uSACA,kBAAC,IAAD,CAAWH,KCCD,+ZDDmBC,MAAOC,IAAQC,SAAS,QAErD,+TACA,kBAAC,IAAD,CAAWH,KCkBD,yTDlBmBC,MAAOC,IAAQC,SAAS,QAErD,moBAIA,6mBAE8C,uCAF9C,iNAKA,oSACkD,IAChD,iDAFF,8PAKA,kBAACC,EAAA,EAAD,CAAOC,SAAS,2BAEhB,iNACA,kBAACD,EAAA,EAAD,CAAOC,SAAS,yBAChB,kBAACC,EAAA,EAAD,CACEC,KAAK,0EACLP,KAAK,2CAKX,yBAAKD,UAAU,OACb,yBAAKA,UAAU,OACb,+KACA,2BACE,gGADF,+jCAMA,2gDAOA,kBAAC,IAAD,CAAWC,KCXD,4SDWmBC,MAAOC,IAAQC,SAAS,QAErD,4BACE,scAIA,obAIA,ufAIA,skBAMF,gLACA,4BACE,4BACE,kBAACG,EAAA,EAAD,CACEC,KAAK,kDACLP,KAAK,qLAGT,4BACE,kBAACM,EAAA,EAAD,CACEC,KAAK,yCACLP,KAAK,oDAOf,yBAAKD,UAAU,OACb,yBAAKA,UAAU,OACb,2CACA,2lBAE2C,iDAF3C,woBAMA,2BACE,4CADF,0pCAMA,6NACsC,0CADtC,u8BAMA,kBAAC,IAAD,CAAWC,KCvDD,uBDuDmBC,MAAOC,IAAQC,SAAS,QAErD,2BACE,kDADF,ykBAKA,8GACiB,gDADjB,wQAE6B,uCAF7B,sMAKA,kBAAC,IAAD,CAAWH,KCjED,wsBDiEmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,OACb,yFAEA,kBAACO,EAAA,EAAD,CAAMC,KAAK,qCAAqCP,KAAK,gBAErD,4BACE,4BACE,kBAACM,EAAA,EAAD,CACEC,KAAK,sCACLP,KAAK,iFAGT,4BACE,kBAACM,EAAA,EAAD,CACEC,KAAK,+BACLP,KAAK,sCAGT,4BACE,kBAACM,EAAA,EAAD,CACEC,KAAK,wCACLP,KAAK,6GAGT,4BACE,kBAACM,EAAA,EAAD,CACEC,KAAK,+BACLP,KAAK,iS,gCE7LnB,oBAQeM,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMP,EAAT,EAASA,KAAT,OACX,uBAAGQ,KAAMD,EAAME,OAAO,SAASC,IAAI,uBAChCV,K,gCCJL,oBAWeI,IATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,yBACEM,IAAKC,sBAAsCP,EAC3CN,UAAU,4BACVc,IAAI,aACJC,QAAQ","file":"static/js/lesson-14.5f1946f9.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson14 = () => (\n  <div className=\"container lesson-14\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Селекторы</h2>\n        <p>\n          Компоненты не должны знать о структуре состояния, их задача - создание\n          разметки по полученным <code>props</code>. В случае изменения\n          структуры состояния, а это естественный процесс, все компоненты\n          которые подписаны на его измененную часть придется рефакторить. В\n          решении этой проблемы помогают селекторы.\n        </p>\n        <p>\n          <strong>Селектор</strong> — функция которая получает ссылку на все\n          состояние и произвольное кол-во других аргументов. Возвращает только\n          определенную часть состояния или вычисляемые данные основываясь на\n          состоянии.\n        </p>\n        <p>\n          Наибольшая выгода получается при использовании композиции селекторов\n          для рассчета производных данных (<code>derived data</code>).\n        </p>\n        <p>\n          Допустим есть состояние хранящее информацию о постах и текущую сессию\n          пользователя.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>Тогда файл селекторов содержит следующие экспорты.</p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <p>Контейнер всех постов подписывается на изменения.</p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <p>Контейнер выбраного поста подписывается на изменения.</p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Таким образом, при изменении структуры состояния, рефакторить\n          необходимо будет только селекторы, а не все компоненты.\n        </p>\n        <p>\n          Селекторы могут быть сложными и выполнять вычисления, это помогает\n          хранить минимально необходимую информацию в <code>store</code>, не\n          захламляя его вычисляемыми данными.\n        </p>\n        <p>\n          Использование селекторов не ограничего функцией{' '}\n          <code>mapStateToProps</code>, их можно применять в действиях или в\n          прослойках.\n        </p>\n        <Image filename=\"abstraction-layers.jpg\" />\n\n        <p>Полная архитектура React\\Redux приложения.</p>\n        <Image filename=\"react-redux-flow.png\" />\n        <Link\n          link=\"https://medium.com/mofed/react-redux-architecture-overview-7b3e52004b6e\"\n          text=\"React + Redux: Architecture Overview\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Общие принципы мемоизации</h2>\n        <p>\n          <strong>Мемоизация</strong> — сохранение (кеширование) результатов\n          выполнения функций для предотвращения повторных вычислений. Это один\n          из способов оптимизации, применяемый для увеличения скорости\n          выполнения компьютерных программ.\n        </p>\n        <p>\n          Проще говоря, мемоизация — это запоминание, сохранение чего-либо в\n          памяти. Функции, в которых используется мемоизация, обычно работают\n          быстрее, так как при их повторных вызовах с одними и теми же\n          аргументами, они, вместо выполнения вычислений, просто считывают\n          результаты из кэша и возвращают их.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Для того, чтобы функцию можно было подвергнуть мемоизации, она\n            должна быть чистой.\n          </li>\n          <li>\n            Мемоизация это компромисс между производительностью и потреблением\n            памяти.\n          </li>\n          <li>\n            Применять мемоизацию при обращениях к API не стоит, браузер\n            автоматически кэширует HTTP-запросы.\n          </li>\n          <li>\n            Лучше всего функции с мемоизацией показывают себя там, где\n            выполняются сложные, ресурсоёмкие вычисления.\n          </li>\n        </ul>\n\n        <h3>2.1. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://habrahabr.ru/company/ruvds/blog/332384/\"\n              text=\"Мемоизация в JS и ускорение функций\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://www.npmjs.com/package/memoizee\"\n              text=\"npm-пакет memoizee\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Reselect</h2>\n        <p>\n          Каждый раз когда происходит действие в любом месте приложения, все\n          подключенные компоненты вызывают функцию <code>mapStateToProps</code>,\n          в результате чего вызываются все селекторы, это может бить по\n          производительности при работе с большими структурами данных.\n        </p>\n        <p>\n          <strong>Reselect</strong> — библиотека для создания селекторов с\n          встроенной мемоизацией аргументов. Позволяет комбинировать селекторы,\n          тем самым отбрасывая необходимость кешировать все состояние, и\n          использовать мемоизированные значения функций.\n        </p>\n        <p>\n          Тоесть селектор созданный с помощью <code>Reselect</code> вернет\n          закешированный результат, если ничего не изменилось. Это позволяет\n          выполнять вычисления только в том случае, если в соответствующей части\n          дерева состояний произошли изменения.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          <strong>createSelector</strong> - основной метод, позволяет создавать\n          селекторы на основе композиции других селекторов, мемоизирует\n          аргументы.\n        </p>\n        <p>\n          Не используйте <code>createSelector</code> для селекторов которые\n          просто обращаются к полю в <code>state</code> и возвращют его\n          значение, это излишне.\n        </p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Материалы</h2>\n\n        <Link link=\"https://codesandbox.io/s/l8q3rqj6q\" text=\"CodeSandbox\" />\n\n        <ul>\n          <li>\n            <Link\n              link=\"https://github.com/reduxjs/reselect\"\n              text=\"Репозиторий reselect\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://youtu.be/6Xwo5mVxDqI\"\n              text=\"Reselect with Redux and React.js\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://youtu.be/_9BDn1QeL4U?t=16m52s\"\n              text=\"Фабрики селекторов\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://youtu.be/yxbe0yoqL38\"\n              text=\"Селекторы - уменьшаем связность кода в React/Redux приложениях\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson14;\n","export const code1 = `const reduxStateShape = {\n  session: {\n    user: {\n      name: 'Mango',\n      email: 'mango@gmail.com',\n    },\n    authenticated: true,\n    error: null,\n  },\n  posts: {\n    items: [],\n    loading: false,\n    selectedTags: [],\n  },\n};`;\n\nexport const code2 = `// posts-selectors.js\nexport const getAllPosts = state => state.posts.items;\n\nexport const isPostsLoading = state => state.posts.loading;\n\nexport const getPostById = (state, id) => {\n  const posts = getAllPosts(state);\n\n  return posts.find(post => post.id === id);\n};\n\nconst getSelectedTags = state => state.posts.selectedTags;\n\nexport const getPostsWithTags = state => {\n  const posts = getAllPosts(state);\n  const tags = getSelectedTags(state);\n\n  return posts.filter(post => tags.some(tag => post.tags.includes(tag)));\n};\n\n// session-selectors.js\nexport const getUserName = state => state.session.user.name;\nexport const isUserAuthenticated = state => state.session.authenticated;`;\n\nexport const code3 = `// PostsContainer.js\nimport { connect } from 'react-redux';\nimport Posts from 'path/to/posts';\nimport {\n  getAllPosts,\n  getPostsWithTags,\n  isPostsLoading,\n} from 'path/to/selectors';\n\nconst mapStateToProps = state => ({\n  posts: getAllPosts(state),\n  postsWithTags: getPostsWithTags(state),\n  isLoading: isPostsLoading(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(Posts);`;\n\nexport const code4 = `// SelectedPostContainer.js\nimport { connect } from 'react-redux';\nimport Post from 'path/to/post';\nimport { getPostById } from 'path/to/selectors';\n\nconst mapStateToProps = (state, props) => ({\n  post: getPostById(state, props.id),\n});\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(Posts);`;\n\nexport const code5 = `const memoize = fn => {\n  const cache = {};\n\n  return (...args) => {\n    const stringifiedArgs = JSON.stringify(args);\n\n    if (cache[stringifiedArgs]) {\n      return cache[stringifiedArgs];\n    }\n\n    cache[stringifiedArgs] = fn(...args);\n\n    return cache[stringifiedArgs];\n  };\n};`;\n\nexport const code6 = `npm install reselect`;\n\nexport const code7 = `import { createSelector } from 'reselect';\n\nexport const getAllPosts = state => state.posts.items;\n\nexport const isPostsLoading = state => state.posts.loading;\n\nconst getSelectedTags = state => state.posts.selectedTags;\n\nexport const getPostsWithTags = createSelector(\n  [getAllPosts, getSelectedTags],\n  (posts, tags) =>\n    posts.filter(post => tags.some(tag => post.tags.includes(tag))),\n);\n\nexport const getPostById = createSelector(\n  [(state, id) => id, getAllPosts],\n  (id, posts) => posts.find(post => post.id === id),\n);\n\n// session-selectors.js\nexport const getUserName = state => state.session.user.name;\nexport const isUserAuthenticated = state => state.session.authenticated;`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n"],"sourceRoot":""}