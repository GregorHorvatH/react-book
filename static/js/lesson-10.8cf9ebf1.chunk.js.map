{"version":3,"sources":["pages/Lesson-10/index.js","pages/Lesson-10/code.js","components/Link/index.js"],"names":["Lesson10","className","Link","link","text","theme","hybrid","language","href","target","rel"],"mappings":"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","file":"static/js/lesson-10.8cf9ebf1.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson10 = () => (\n  <div className=\"container lesson-10\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Ванильный CSS</h2>\n        <p>\n          CSS3 переходы и анимации это лучший метод для простой анимации, но\n          только в тех случаях, когда над анимируемым элементом не выполняются\n          операции удаления и добавления в DOM.\n        </p>\n        <p>\n          Использование CSS для скрытия элементов противоречит идеологии React,\n          разметка остается в DOM-дереве, и практически невозможно нормально\n          сделать анимацию исчезновения. Анимация добавления и удаления\n          элементов коллекции излишне сложная.\n        </p>\n        <Link\n          link=\"https://codesandbox.io/s/lym153z46z?from-embed\"\n          text=\"CodeSandbox\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. React Transition Group</h2>\n        <p>\n          Эта библиотека не анимирует стили самостоятельно. Вместо этого,\n          разработчику предоставляется набор простых компонентов, которые\n          отслеживают этапы перехода состояния элемента (добавления и удаления в\n          DOM) и управляют CSS-стилями, тем самым позволяя применить\n          определенный CSS на каждом этапе.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"http://reactcommunity.org/react-transition-group/\"\n          text=\"React Transition Group\"\n        />\n\n        <h3>2.1. Компонент Transition</h3>\n        <p>\n          Компонент на базе которого построены остальные. Позволяет описывать\n          переход компонента от одного состояния к другому с течением времени.\n          По умолчанию компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Transition\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          не изменяет поведение компонента, который он отображает, а только\n          отслеживает состояния <code>enter</code> и <code>exit</code>.\n          Разработчик может сделать кастомные эффекты (например, добавляя инлайн\n          стили или классы) под эти состояния.\n        </p>\n        <p>Существует 4 основных состояния, в которых может быть элемент:</p>\n        <ul>\n          <li>\n            <code>entering</code> - элемент появляется в DOM\n          </li>\n          <li>\n            <code>entered</code> - элемент появился в DOM\n          </li>\n          <li>\n            <code>exiting</code> - элемент удаляется из DOM\n          </li>\n          <li>\n            <code>exited</code> - элемент удален из DOM\n          </li>\n        </ul>\n\n        <p>Пропы:</p>\n        <ul>\n          <li>\n            <code>entering</code> - элемент появляется в DOM\n          </li>\n          <li>\n            <code>entered</code> - элемент появился в DOM\n          </li>\n          <li>\n            <code>exiting</code> - элемент удаляется из DOM\n          </li>\n          <li>\n            <code>exited</code> - элемент удален из DOM\n          </li>\n        </ul>\n        <p>\n          Если значение пропа <code>in</code> равно <code>true</code>, компонент\n          начинает стадию <code>входа</code>. Он переходит из текущего состояния\n          к <code>entering</code> и останавливается в нем на указанное в{' '}\n          <code>timeout</code> время, по истечении которого переходит в{' '}\n          <code>entered</code>.\n        </p>\n        <p>\n          Если значение пропа <code>in</code> равно <code>false</code>,\n          компонент начинает стадию <code>Выхода</code>. Он переходит из\n          текущего состояния к <code>exiting</code> и останавливается в нем на\n          указанное в <code>timeout</code> время, по истечении которого\n          переходит в <code>exited</code>.\n        </p>\n        <Link\n          link=\"https://codesandbox.io/s/vnjol2wvw0?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <h3>2.2. Компонент CSSTransition</h3>\n        <p>\n          Компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>CSSTransition\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          , в отличии от{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Transition\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          , инкапсулирует отслеживание стадии перехода и вызывает перекомпоновку\n          (reflow) в браузере, что позволяет без дополнительных усилия\n          реализовать анимациюю добавления элемента. Получает те же самые пропы{' '}\n          <code>in</code>, <code>timeout</code> и другие, а также проп{' '}\n          <code>classNames</code>, в котором можно указать кастомные имена\n          классов для каждой фазы перехода.\n        </p>\n        <p>\n          Применяет пару CSS-классов для каждой из стадий <code>appear</code>,{' '}\n          <code>enter</code>, <code>exit</code> и<code>done</code> во время\n          перехода. На старте каждой фазы применяется базовый класс, после чего\n          сразу применяется класс с приставкой <code>active</code>. Разработчику\n          достаточно передать имя базового класса и описать классы для каждой из\n          стадий.\n        </p>\n        <p>\n          К примеру если базовый класс <code>fade</code>:\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://codesandbox.io/s/3vz1689l46?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <p>\n          Пропу <code>classNames</code> можно передать объект с кастомными\n          именами классов под каждую стадию.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Если используются CSS-модули, то имена классов можно назвать как имена\n          ключей на объекте для <code>classNames</code> и передать объект\n          классов целиком.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://codesandbox.io/s/mox604444y?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <h3>2.3. Transition events</h3>\n        <p>\n          Всего 6 штук, происходят в указанном порядке. Используются для\n          управления сложными анимациями и выполнения кода на определенной\n          стадии.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.4. Компонент TransitionGroup</h3>\n        <p>\n          Компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>TransitionGroup\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          используется как контейнер для управления коллекцией компонентов{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Transition\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          или{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>CSSTransition\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          . При удалении и добавлении элементов коллекции,{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>TransitionGroup\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          автоматически указывает значение пропа <code>in</code> добавляемого\n          или удаляемого элемента.\n        </p>\n        <p>\n          Принимает проп <code>component</code>, в котором можно указать тип\n          HTML-элемента который необходимо отрендерить как контейнер, по\n          умолчанию будет <code>div</code>. Для передачи стилей есть проп{' '}\n          <code>className</code>, значение которого передается элементу.\n        </p>\n        <Link\n          link=\"https://codesandbox.io/s/7zn06zzkn1?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <h3>2.5. Анимация маршрутов</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"http://reactcommunity.org/react-transition-group/with-react-router\"\n              text=\"RTG With React Router\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"http://maisano.github.io/react-router-transition/\"\n              text=\"React Router Transition\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://youtu.be/chAJ61qxrz0\"\n              text=\"React Router v4 and animating transitions\"\n            />\n          </li>\n        </ul>\n\n        <h3>2.6. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://youtu.be/QalLF-sAmVc\"\n              text=\"Animating The Virtual DOM\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://github.com/chenglou/react-motion\"\n              text=\"Репозиторий React Motion\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://alligator.io/react/react-motion/\"\n              text=\"Animations in React Using React Motion\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459\"\n              text=\"A gentle introduction to React Motion\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://medium.com/@bjorn.holdt/react-motion-101-springs-336f4f29d95a\"\n              text=\"React-motion 101: Springs\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://github.com/react-tools/react-move\"\n              text=\"Репозиторий React Move\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://github.com/gabiseabra/styled-transition-group\"\n              text=\"Репозиторий styled-transition-group\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson10;\n","export const code1 = `npm install react-transition-group`;\n\nexport const code2 = `/* Применится как только элемент будет добавлен в DOM */\n.fade-enter {\n}\n\n/*\n* Применится на следующий тик после fade-enter\n* Сюда добавляем свойство transition\n*/\n.fade-enter-active {\n}\n\n/* Применится как только проп in получит false */\n.fade-exit {\n}\n\n/*\n* Применится на следующий тик после fade-exit\n* Сюда добавляем свойство transition\n*/\n.fade-exit-active {\n}`;\n\nexport const code3 = `classNames={{\n  appear: 'my-appear',\n  appearActive: 'my-active-appear',\n  appearDone: 'my-done-appear',\n  enter: 'my-enter',\n  enterActive: 'my-active-enter',\n  enterDone: 'my-done-enter',\n  exit: 'my-exit',\n  exitActive: 'my-active-exit',\n  exitDone: 'my-done-exit',\n }}`;\n\nexport const code4 = `import styles from './styles.module.css';\n\n<CSSTransition classNames={styles}>\n`;\n\nexport const code5 = `<CSSTransition\nonEnter={() => console.log('onEnter event')}\nonEntering={() => console.log('onEntering event')}\nonEntered={() => console.log('onEntered event')}\nonExit={() => console.log('onExit event')}\nonExiting={() => console.log('onExiting event')}\nonExited={() => console.log('onExited event')}\n/>`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n"],"sourceRoot":""}