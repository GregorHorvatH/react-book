{"version":3,"sources":["pages/Lesson-04/index.js","pages/Lesson-04/code.js","components/Link/index.js","components/Image/index.js"],"names":["Lesson04","className","Image","filename","text","theme","hybrid","language","Link","link","href","target","rel","src","process","alt","loading"],"mappings":"mKAsLeA,UA/KE,kBACf,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kKACA,kvBAGI,uCAHJ,KAKA,sRACA,4BACE,+DACS,uCADT,kKACyD,IACvD,uCAFF,yCAIA,0EACU,0CADV,qPAKF,gKACA,4BACE,6FACc,0CADd,uNAIA,+QACA,mQAEF,kBAACC,EAAA,EAAD,CAAOC,SAAS,yBAChB,kBAAC,IAAD,CAAWC,KCtCD,gSDsCmBC,MAAOC,IAAQC,SAAS,QAErD,y2BAQJ,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,iEACA,kLACA,kBAAC,IAAD,CAAWG,KCpCD,u3CDoCmBC,MAAOC,IAAQC,SAAS,QAErD,qHACmB,uCADnB,WACwC,0CADxC,+XAEwE,IACtE,0CAHF,KAKA,kBAAC,IAAD,CAAWH,KCCD,osFDDmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,kLACA,2BACE,4HADF,uPAEmC,qCAFnC,4BAEyD,IACvD,uCAHF,8cAIqD,IACnD,yCALF,KAOA,k8CAOA,kBAAC,IAAD,CAAWG,KCgED,yoBDhEmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,mFACA,8aAGE,sCAHF,uBAGwB,uCAHxB,KAKA,yJACA,4BACE,yTACuD,IACrD,uCAFF,kGAEwC,yCAFxC,+GAKA,oJACwB,0CADxB,kVAE0C,IACxC,qDAEF,+ZAGE,uCAHF,sKAMF,wzBAKA,kBAAC,IAAD,CAAWG,KC6CD,y4CD7CmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,qGACA,qUAC0D,IACxD,sCAFF,qTAKA,4BACE,6HACA,6PAEF,wNACsC,yCADtC,UAC6D,IAC3D,uCAFF,uUAKA,kBAAC,IAAD,CAAWG,KCkFD,sHDlFmBC,MAAOC,IAAQC,SAAS,QACrD,iPACA,kBAAC,IAAD,CAAWH,KCuFD,y+CDvFmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,uEACA,0RACuD,IACrD,uCAFF,WAEuB,0CAFvB,gNAKA,kBAAC,IAAD,CAAWG,KCyID,w5BDzImBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,8KACA,4BACE,4BACE,kBAACO,EAAA,EAAD,CACEC,KAAK,yCACLL,KAAK,+GAGT,4BACE,kBAACI,EAAA,EAAD,CACEC,KAAK,2EACLL,KAAK,2BAGT,4BACE,kBAACI,EAAA,EAAD,CAAMC,KAAK,iCAAiCL,KAAK,YAEnD,4BACE,kBAACI,EAAA,EAAD,CAAMC,KAAK,+BAA+BL,KAAK,4B,gCE9K3D,oBAQeI,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAML,EAAT,EAASA,KAAT,OACX,uBAAGM,KAAMD,EAAME,OAAO,SAASC,IAAI,uBAChCR,K,gCCJL,oBAWeF,IATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,yBACEU,IAAKC,sBAAsCX,EAC3CF,UAAU,4BACVc,IAAI,aACJC,QAAQ","file":"static/js/lesson-04.68709c5c.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson04 = () => (\n  <div className=\"container lesson-04\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Контролируемый элемент</h2>\n        <p>\n          Основная цель любой формы - получить данные пользователя. Элементы\n          формы это контроллируемые компоненты, значения всех полей должны быть\n          в <code>state</code>.\n        </p>\n        <p>Паттерн работы с элементами форм очень простой.</p>\n        <ul>\n          <li>\n            Поле в <code>state</code> определяет значение атрибута{' '}\n            <code>value</code> инпута\n          </li>\n          <li>\n            Событию <code>onChange</code> передается метод изменяющий поле в\n            состоянии\n          </li>\n        </ul>\n        <p>Получаем замкнутый круг.</p>\n        <ul>\n          <li>\n            При событии <code>onChange</code>, метод класса обновляет поле в\n            состоянии\n          </li>\n          <li>При изменении состояния происходит ре-рендер</li>\n          <li>Инпут отображается с обновленными данными</li>\n        </ul>\n        <Image filename=\"controlled_input.jpg\" />\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Получается что не интерфейс определяет какие у нас данные, а наоборот,\n          данные определяют то, что видит пользователь, обновляя DOM при\n          изменении состояния компонента.\n        </p>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Формы</h2>\n        <p>Создадим форму регистрации.</p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Добавим поля для <code>email</code> и <code>password</code>, а заодно\n          используем очень полезный паттерн для callback-функции передаваемой в{' '}\n          <code>onChange</code>.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Генерация Id элементов формы</h2>\n        <p>\n          <strong>Доступность (accessibility, a11y)</strong> - очень важная тема\n          в современном вебе. HTML-атрибут <code>for</code> тега{' '}\n          <code>label</code> помогает читалкам и другим вспомогательным\n          инструментам. В React он представлен jsx-атрибутом{' '}\n          <code>htmlFor</code>.\n        </p>\n        <p>\n          Для генерации уникальных идентификаторов элементов форм используется\n          следующий подход: для каждого экземляра компонента, при его\n          инициализации, создается набор уникальных идентификаторов, ханящихся\n          на экземпляре. Таким образом, между разными формами получаем\n          уникальные id.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Чекбоксы</h2>\n        <p>\n          Работа с чекбоксами проста и понятна. Чекбокс может быть всего в 2-х\n          состояниях:\n          <code>true</code> или <code>false</code>.\n        </p>\n        <p>Особенности чекбоксов:</p>\n        <ul>\n          <li>\n            Имя атрибута которому передается текущее значение из{' '}\n            <code>state</code>. Для чекбоксов это <code>checked</code>, и\n            передаем туда буль\n          </li>\n          <li>\n            При обработке события <code>onChange</code>, для получения значения,\n            в объекте события обращаемся к свойству{' '}\n            <code>event.text.checked</code>\n          </li>\n          <li>\n            Если чекбокс должен хранить значение, его так же можно повесить на\n            атрибут\n            <code>value</code> и прочитать из объекта события\n          </li>\n        </ul>\n        <p>\n          Добавим к нашей форме регистрации чекбокс для подтвержения\n          пользовательского соглашения, и сделаем кнопку сабмита неактивной пока\n          неактивен чекбокс.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>5. Радиокнопки</h2>\n        <p>\n          В отличии от привычной группировки по значению атрибута{' '}\n          <code>name</code>, в React радиокнопка это всего лишь элемент\n          интерфейса, который:\n        </p>\n        <ul>\n          <li>Знает выбран ли он</li>\n          <li>Может попросить форму изменить выделение</li>\n        </ul>\n        <p>\n          Обычно у радиокнопок есть и атрибут <code>checked</code> и{' '}\n          <code>value</code>. К примеру радио кнопка отвечающая за выбор пола\n          пользователя.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n        <p>Добавим группу радиокнопок в нашу форму.</p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>6. Селект</h2>\n        <p>\n          Все просто - есть селект, есть опции, у селекта есть{' '}\n          <code>value</code> и <code>onChange</code>. Добавляем выбор возрастной\n          категории.\n        </p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>7. Дополнительные материалы</h2>\n        <ul>\n          <li>\n            <Link\n              link=\"https://ru.reactjs.org/docs/forms.html\"\n              text=\"Документация - формы\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\"\n              text=\"Controlled Components\"\n            />\n          </li>\n          <li>\n            <Link link=\"https://jaredpalmer.com/formik\" text=\"Formik\" />\n          </li>\n          <li>\n            <Link link=\"https://final-form.org/react\" text=\"React Final Form\" />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson04;\n","export const code1 = `class App extends Component {\n  state = {\n    value: '',\n  };\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return <input type=\"text\" value={value} onChange={this.handleChange} />;\n  }\n}`;\n\nexport const code2 = `class SignUpForm extends Component {\n  state = {\n    login: '',\n  };\n\n  /*\n   * Отвечает за обновление состояния\n   */\n  handleChange = e => {\n    this.setState({ login: e.target.value });\n  };\n\n  /*\n   * Вызывается при отправке формы\n   */\n  handleSubmit = evt => {\n    evt.preventDefault();\n    console.log(\\`Signed up as: \\${this.state.login}\\`);\n\n    // Проп который передается форме для вызова при сабмите\n    this.props.onSubmit(this.state.login);\n  };\n\n  render() {\n    const { login } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            placeholder=\"Enter login\"\n            value={login}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Sign up as {login}</button>\n      </form>\n    );\n  }\n}`;\n\nexport const code3 = `/*\n* Выносим объект с примитивами в константу чтобы было удобно сбрасывать.\n* Нельзя использовать если в каком-то свойстве состояния хранится сложный тип.\n*/\nconst INITIAL_STATE = {\n login: '',\n email: '',\n password: '',\n};\n\nclass SignUpForm extends React.Component {\n state = { ...INITIAL_STATE };\n\n /*\n  * Для всех инпутов создаем один обарботчик\n  * Различать инпуты будем по атрибуту name\n  */\n handleChange = ({ target }) => {\n   const { name, value } = target;\n\n   this.setState({ [name]: value });\n };\n\n handleSubmit = evt => {\n   evt.preventDefault();\n\n   const { login, email, password } = this.state;\n\n   console.log(\\`\n     Login: \\${login}\n     Email: \\${email}\n     Password: \\${password}\n   \\`);\n\n   this.props.onSubmit({ ...this.state });\n   this.reset();\n };\n\n reset = () => {\n   this.setState({ ...INITIAL_STATE });\n };\n\n render() {\n   const { login, email, password } = this.state;\n\n   return (\n     <form onSubmit={this.handleSubmit}>\n       <label>\n         Name\n         <input\n           type=\"text\"\n           placeholder=\"Enter login\"\n           name=\"login\"\n           value={login}\n           onChange={this.handleChange}\n         />\n       </label>\n       <label>\n         Email\n         <input\n           type=\"email\"\n           placeholder=\"Enter email\"\n           name=\"email\"\n           value={email}\n           onChange={this.handleChange}\n         />\n       </label>\n       <label>\n         Password\n         <input\n           type=\"password\"\n           placeholder=\"Enter password\"\n           name=\"password\"\n           value={password}\n           onChange={this.handleChange}\n         />\n       </label>\n\n       <button type=\"submit\">Sign up as {login}</button>\n     </form>\n   );\n }\n}`;\n\nexport const code4 = `// Можно использовать любой пакет для генерации уникальных строк\nimport shortid from 'shortid';\n\nclass Form extends React.Component {\n  loginInputId = shortid.generate();\n\n  render() {\n    return (\n      <form>\n        <label htmlFor={this.loginInputId}>Login</label>\n        <input type=\"text\" name=\"login\" id={this.loginInputId} />\n      </form>\n    );\n  }\n}`;\n\nexport const code5 = `const INITIAL_STATE = {\n  login: '',\n  email: '',\n  password: '',\n  agreed: false,\n};\n\nclass SignUpForm extends React.Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value, type, checked } = target;\n\n    // Если тип элемента checkbox, берем значение checked,\n    // в противном случае value\n    this.setState({ [name]: type === 'checkbox' ? checked : value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { login, email, password, agreed } = this.state;\n\n    console.log(\\`\n      Login: \\${login}\n      Email: \\${email}\n      Password: \\${password}\n      Agreed: \\${agreed}\n    \\`);\n\n    /* ... */\n  };\n\n  render() {\n    const { login, email, password, agreed } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {/* ... */}\n        <label>\n          Agree to terms\n          <input\n            type=\"checkbox\"\n            checked={agreed}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\" disabled={!agreed}>\n          Sign up as {login}\n        </button>\n      </form>\n    );\n  }\n}`;\n\nexport const code6 = `<input\ntype=\"radio\"\nchecked={this.state.gender === 'male'}\nvalue=\"male\"\nonChage={this.handleGenderChange}\n/>`;\n\nexport const code7 = `/*\n* Используем Enumerable чтобы не болеть антипаттерном \"магические числа\"\n*/\nconst Gender = {\n MALE: 'male',\n FEMALE: 'female',\n};\n\nconst INITIAL_STATE = {\n login: '',\n email: '',\n password: '',\n agreed: false,\n gender: null,\n};\n\nclass SignUpForm extends React.Component {\n state = {\n   ...INITIAL_STATE,\n };\n\n /*... */\n\n render() {\n   const { login, email, password, agreed, gender } = this.state;\n\n   return (\n     <form onSubmit={this.handleSubmit}>\n       {/* ... */}\n\n       <section>\n         <h2>Choose your gender</h2>\n         <label>\n           Male\n           <input\n             type=\"radio\"\n             checked={gender === Gender.MALE}\n             name=\"gender\"\n             value={Gender.MALE}\n             onChange={this.handleChange}\n           />\n         </label>\n         <label>\n           Female\n           <input\n             type=\"radio\"\n             checked={gender === Gender.FEMALE}\n             name=\"gender\"\n             value={Gender.FEMALE}\n             onChange={this.handleChange}\n           />\n         </label>\n       </section>\n\n       <button type=\"submit\" disabled={!agreed}>\n         Sign up as {login}\n       </button>\n     </form>\n   );\n }\n}`;\n\nexport const code8 = `const INITIAL_STATE = {\n  login: '',\n  email: '',\n  password: '',\n  agreed: false,\n  gender: null,\n  age: '',\n};\n\nclass SignUpForm extends React.Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  /* ... */\n\n  render() {\n    const { login, email, password, agreed, gender, age } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {/* ... */}\n\n        <label>\n          Choose your age\n          <select name=\"age\" value={age} onChange={this.handleChange}>\n            <option value=\"\" disabled>\n              ...\n            </option>\n            <option value=\"18-25\">18-25</option>\n            <option value=\"26-35\">26-35</option>\n            <option value=\"36+\">36+</option>\n          </select>\n        </label>\n\n        <button type=\"submit\" disabled={!agreed}>\n          Sign up as {login}\n        </button>\n      </form>\n    );\n  }\n}`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n"],"sourceRoot":""}