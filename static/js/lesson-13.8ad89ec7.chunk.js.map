{"version":3,"sources":["pages/Lesson-13/index.js","pages/Lesson-13/code.js","components/Link/index.js","components/Image/index.js"],"names":["Lesson13","className","Image","filename","Link","link","text","theme","hybrid","language","href","target","rel","src","process","alt","loading"],"mappings":"oKA4LeA,UArLE,kBACf,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,mDACA,2BACE,uGADF,2xBAKA,ojCAKA,opCAMA,kBAACC,EAAA,EAAD,CAAOC,SAAS,mCAEhB,4BACE,odAIA,0QACA,8rBAIA,qrBAIA,8aAKF,kBAACD,EAAA,EAAD,CAAOC,SAAS,yBAEhB,iIACA,8jBAGE,kBAACC,EAAA,EAAD,CACEC,KAAK,yEACLC,KAAK,wHALT,KASA,kBAAC,IAAD,CAAWA,KC7DD,oDD6DmBC,MAAOC,IAAQC,SAAS,QAErD,4BACE,4BACE,uCADF,qHAGA,4BACE,wCADF,kGAGA,4BACE,sCADF,0yBAMF,kmBAEqD,IACnD,iDAHF,qhBAKE,0CALF,WAK0B,+CAL1B,KAOA,kBAAC,IAAD,CAAWH,KCjFD,mYDiFmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKR,UAAU,OACb,yBAAKA,UAAU,OACb,8HACA,+fAIA,kBAACC,EAAA,EAAD,CAAOC,SAAS,qBAEhB,wJACA,m4BAGgC,+CAHhC,0HAIY,6CAJZ,4KAIuE,IACrE,4CALF,uBAK8B,kDAL9B,KAOA,iTACqD,IACnD,iDAFF,6hBAIa,uCAJb,KAMA,kBAAC,IAAD,CAAWG,KC5FD,qDD4FmBC,MAAOC,IAAQC,SAAS,QAErD,6DACQ,gDADR,8xCAOA,kBAAC,IAAD,CAAWH,KCnGD,yNDmGmBC,MAAOC,IAAQC,SAAS,QAErD,qDACA,gIACoB,uCADpB,ypBAIE,0CAJF,WAI0B,0CAJ1B,iLAKe,0CALf,mlBASA,kBAAC,IAAD,CAAWH,KCpGD,yIDoGmBC,MAAOC,IAAQC,SAAS,QACrD,kBAACL,EAAA,EAAD,CACEC,KAAK,yCACLC,KAAK,mFAGP,oFACA,wzBAKA,gdAIA,kBAAC,IAAD,CAAWA,KCjHD,8EDiHmBC,MAAOC,IAAQC,SAAS,QAErD,2RACA,4BACE,kDACM,mDADN,oCAC4C,yCAAqB,IADjE,4EAEe,sCAFf,8BAGE,qDAHF,sBAGuC,IACrC,qDAJF,qDAI4C,wCAE5C,kDACM,qDADN,oCAC8C,uCAAmB,IADjE,sJAIA,kDACM,qDADN,oCAC8C,uCAAmB,IADjE,kHAKF,kBAAC,IAAD,CAAWH,KC5HD,6dD4HmBC,MAAOC,IAAQC,SAAS,QAErD,gLACA,4BACE,4BACE,kBAACL,EAAA,EAAD,CACEC,KAAK,+EACLC,KAAK,iCAGT,4BACE,kBAACF,EAAA,EAAD,CACEC,KAAK,+BACLC,KAAK,8B,gCEnLnB,oBAQeF,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACX,uBAAGI,KAAML,EAAMM,OAAO,SAASC,IAAI,uBAChCN,K,gCCJL,oBAWeJ,IATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,yBACEU,IAAKC,sBAAsCX,EAC3CF,UAAU,4BACVc,IAAI,aACJC,QAAQ","file":"static/js/lesson-13.8ad89ec7.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson13 = () => (\n  <div className=\"container lesson-13\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Redux middleware</h2>\n        <p>\n          <strong>Middleware (прослойка)</strong> - общая концепция в\n          программном обеспечении, инструмент для расширения функционала,\n          находящийся между двух точек в логической цепочке исполнения кода.\n        </p>\n        <p>\n          Прослойка это функция промежуточной обработки, которая получает некие\n          данные, может их обработать и, если необходимо, передать дальше по\n          цепочке. Можно использовать множество прослоек в одном проекте.\n        </p>\n        <p>\n          Redux-прослойки предоставляют точку расширения между отправкой\n          действия и моментом, когда это действие достигает редюсера. Прослойки\n          используются для логирования, сообщения об ошибках, обработки\n          HTTP-запросов, аналитики и т.д.\n        </p>\n        <Image filename=\"redux-flow-with-middleware.png\" />\n\n        <ul>\n          <li>\n            Перед тем как дейсвия попадают в редюсеры, они проходят через\n            цепочку (стек) прослоек.\n          </li>\n          <li>Прослойки получают доступ ко всем действиям.</li>\n          <li>\n            Если прослойка рассчитана на работу с каким-то действием, она может\n            его изменять, отменять или выполнять какие-то другие дейтсвия.\n          </li>\n          <li>\n            Если прослойка не рассчитана на работу с определенным типом\n            действий, она просто пропускает действие через себя без изменений.\n          </li>\n          <li>\n            После того как действие прошло всю цепочку прослоек, оно попадает в\n            редюсеры.\n          </li>\n        </ul>\n        <Image filename=\"middleware-stack.png\" />\n\n        <h3>1.1. Cоздание прослоек</h3>\n        <p>\n          Redux написан с применением функционального программирования, поэтому\n          для создания прослоек используется\n          <Link\n            link=\"http://prgssr.ru/development/vvedenie-v-karrirovanie-v-javascript.html\"\n            text=\"каррированая функция\"\n          />\n          .\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            <code>store</code> - ссылка на Redux-хранилище\n          </li>\n          <li>\n            <code>action</code> - текущее действие\n          </li>\n          <li>\n            <code>next</code> - функция которую необходимо вызвать когда\n            прослойка закончила обработку действия, для того чтобы отправить его\n            дальше по цепочке прослоек или в редюсеры.\n          </li>\n        </ul>\n        <p>\n          Для того чтобы использовать прослойку необходимо добавить ее при\n          создании хранилища. Для этого у Redux есть функция{' '}\n          <code>applyMiddleware</code>, которая принимает произвольное\n          количество аргументов. Результат ее вызова мы передаем как аргумент\n          <code>enhancer</code> в <code>createStore()</code>.\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Асинхронность в Redux</h2>\n        <p>\n          На иллюстрации ниже изображена полная схема работы Redux в приложении\n          при асинхронных запросах.\n        </p>\n        <Image filename=\"redux-flow-2.gif\" />\n\n        <h3>2.1. Асинхронные действия</h3>\n        <p>\n          Redux не предоставляет функционала для отправки асинхронных действий,\n          эту задачу решают прослойки. Есть много готовых решений: для простых\n          асинхронных операций подойдет <code>redux-promise</code>, для средней\n          сложности <code>redux-thunk</code>, а для очень сложных и запутанных{' '}\n          <code>redux-saga</code> или <code>redux-observable</code>.\n        </p>\n        <p>\n          Для начала необходимо научиться писать асинхронные{' '}\n          <code>action creators</code>. Это функции которые вместо\n          объекта-действия возвращают функцию. В компьютерных науках это\n          называется <code>thunk</code>.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Когда <code>action creator</code> возвращает функцию, эта функция\n          будет выполняться прослойкой. Такая функция не должна быть чистой,\n          поэтому она может иметь побочные эффекты, в том числе выполнение\n          асинхронных HTTP-запросов. В ее теле также могут быть отправлены\n          другие сихронные действия.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.2. thunk middleware</h3>\n        <p>\n          Напишем прослойку <code>thunk</code>, которая умеет обрабатывать\n          асинхронные действия. Если действие это функция, она будет вызвана и\n          аргументами ей будут переданы\n          <code>dispatch</code> и <code>getState</code>, тем самым позволяя\n          использовать <code>dispatch</code> в теле действия. В противном\n          случае, если это обычный объект, действие будет отправлено дальше по\n          цепочке прослоек.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://github.com/reduxjs/redux-thunk\"\n          text=\"Репозиторий redux-thunk\"\n        />\n\n        <h3>2.3. HTTP-запросы</h3>\n        <p>\n          При асинхроннах операциях зачастую необходимо отображать лоадеры и\n          обрабатывать ошибки. В таких случаях можно использовать следующую\n          схему действий.\n        </p>\n        <p>\n          Начальное состояние может выглядеть так, с полями флага загрузки и\n          хранения ошибки.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <p>Тогда асинхронное действие может выглядеть так.</p>\n        <ul>\n          <li>\n            При <code>notes/FETCH_START</code> в поле <code>loading</code>{' '}\n            записывается <code>true</code>, а при\n            <code>notes/FETCH_SUCCESS</code> или{' '}\n            <code>notes/FETCH_FAILURE</code> наоборот <code>false</code>\n          </li>\n          <li>\n            При <code>notes/FETCH_FAILURE</code> в поле <code>error</code>{' '}\n            записывается объект ошибки\n          </li>\n          <li>\n            При <code>notes/FETCH_SUCCESS</code> в поле <code>items</code>{' '}\n            записываются данные\n          </li>\n        </ul>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.4. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://medium.com/fullstack-academy/thunks-in-redux-the-basics-85e538a3fe60\"\n              text=\"Thunks in Redux: The Basics\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://youtu.be/xihoZZU0gao\"\n              text=\"Redux Thunk Tricks\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson13;\n","export const code1 = `const middleware = store => next => action => {};`;\n\nexport const code2 = `import { createStore, applyMiddleware } from 'redux';\n\nconst reducer = state => state;\n\nconst loggerMiddleware = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action);\n  console.groupEnd(action.type);\n\n  return next(action);\n};\n\nconst enhancer = applyMiddleware(loggerMiddleware);\n\nconst store = createStore(reducer, enhancer);`;\n\nexport const code3 = `const asyncActionCreator = args => dispatch => {};`;\n\nexport const code4 = `const asyncActionCreator = args => dispatch => {\n  fetch('some url')\n    .then(r => r.json())\n    .then(data => {\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: data,\n      });\n    });\n};`;\n\nexport const code5 = `const thunk = ({ dispatch, getState }) => next => action =>\ntypeof action === 'function' ? action(dispatch, getState) : next(action);`;\n\nexport const code6 = `{\n  notes: {\n    items: [],\n    loading: false,\n    error: null\n  }\n}`;\n\nexport const code7 = `const fetchStart = () => ({\n  type: 'notes/FETCH_START',\n});\n\nconst fetchSuccess = data => ({\n  type: 'notes/FETCH_SUCCESS',\n  payload: data,\n});\n\nconst fetchFailure = error => ({\n  type: 'notes/FETCH_FAILURE',\n  payload: error,\n});\n\nconst asyncActionCreator = args => dispatch => {\n  dispatch(fetchStart());\n\n  fetch('some url')\n    .then(r => r.json())\n    .then(data => dispatch(fetchSuccess(data)))\n    .catch(err => dispatch(fetchFailure(err)));\n};`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n"],"sourceRoot":""}