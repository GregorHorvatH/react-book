{"version":3,"sources":["pages/Lesson-11/index.js","pages/Lesson-11/code.js","components/Link/index.js","components/Image/index.js"],"names":["Lesson11","className","Image","filename","text","theme","hybrid","language","Link","link","href","target","rel","src","process","alt","loading"],"mappings":"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","file":"static/js/lesson-11.f23bd156.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson11 = () => (\n  <div className=\"container lesson-12\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Введение</h2>\n        <p>\n          Требования к функционалу приложений постоянно растут, в результате\n          растет количество состояний интерфейса: асинхронная загрузка данных,\n          лоадеры, фильтры и т. п.\n        </p>\n        <p>\n          За всем этим необходимо следить и обрабатывать, и это не просто. В\n          один момент можно просто перестать улавливать связь между изменениями,\n          так как контроль над тем, когда, почему и как изменилось состояние\n          потерян из-за сложности самого состояния.\n        </p>\n        <p>\n          Идеальный вариант, это когда интерфейс вообще не знает о\n          бизнес-логике. В этом нам помогают библиотеки управления состоянием.{' '}\n          <code>Redux</code> и <code>Mobx</code> самые популярные, а для\n          бекендов основаных на <code>GraphQL</code> есть <code>Apollo</code>.\n        </p>\n        <Image filename=\"redux-from-spaghetti-to-reducer.png\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Основные принципы Redux</h2>\n        <ul>\n          <li>\n            <strong>Предсказуемость результата</strong> - существует всегда один\n            источник правды, хранилище (<code>store</code>), хранящее в себе\n            состояние приложения и методы для работы с ним.\n          </li>\n          <li>\n            <strong>Поддреживаемость</strong> - есть набор правил и лучших\n            практик о том, как должен быть структурирован код, что делает его\n            более единообразным и понятным.\n          </li>\n          <li>\n            <strong>Инструменты разработчика</strong> - все происходящее можно\n            отслеживать в режиме реального времени.\n          </li>\n          <li>\n            <strong>Простота тестирования</strong> - первое правило написания\n            тестируемого кода - писать небольшие функции, которые выполняют\n            только одну вещь и независимы. Redux - это в основном функции:\n            маленькие, чистые и изолированные.\n          </li>\n        </ul>\n        <Image filename=\"no-redux-vs-redux.png\" />\n\n        <h3>2.1. Поток данных</h3>\n        <p>\n          Без использования библиотеки управления состоянием процесс обновления\n          данных выглядит следующим образом: компонент инициализирует изменение\n          состояния вызвав метод полученный пропом, после чего измененное\n          состояние пробрасывается пропами вниз по дереву.\n        </p>\n        <Image filename=\"vanilla-flow.gif\" />\n\n        <p>\n          Поток данных в Redux всегда однонаправленный, и очень простой. За\n          данные отвечает хранилище, компоненты только вызывают методы\n          обновления данных и потом получают обновленные данные.\n        </p>\n        <Image filename=\"redux-flow.gif\" />\n\n        <ul>\n          <li>\n            Пользователь, работая с интерфейсом, инициализирует отправку\n            действий (<code>actions</code>)\n          </li>\n          <li>\n            Хранилище (<code>store</code>) вызывает все объявленные редьюсеры (\n            <code>reducers</code>), передавая им текущее состояние (\n            <code>state</code>) и действие (<code>action</code>)\n          </li>\n          <li>\n            Хранилище (<code>store</code>) сохраняет обновленное дерево\n            состояния (<code>state</code>) возвращенное из редьюсеров (\n            <code>reducers</code>)\n          </li>\n          <li>\n            При обновлении состояния (<code>state</code>) вызываются все\n            подписчики для обновления интерфейса\n          </li>\n        </ul>\n        <Image filename=\"flow.png\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Store</h2>\n        <p>\n          <strong>\n            Хранилище (<code>store</code>)\n          </strong>{' '}\n          - js-объект, который содержит состояние приложения и методы доступа к\n          нему, отправки действий и регистрации слушателей.\n        </p>\n        <ul>\n          <li>\n            Хранит состояние (<code>state</code>) приложения как один объект\n          </li>\n          <li>\n            Позволяет получить доступ к состоянию через метод{' '}\n            <code>getState()</code>\n          </li>\n          <li>Напрямую состояние доступно только для чтения</li>\n          <li>\n            Единственный способ изменить состояние - отправить действие (\n            <code>action</code>), объект, описывающий, что произошло\n          </li>\n          <li>\n            Для отправки дейсвтий есть метод <code>dispatch(action)</code>\n          </li>\n          <li>\n            Изменения производятся с использованием чистых функций - редюсеров (\n            <code>reducers</code>), которые реагируют на действия\n          </li>\n          <li>\n            Регистрирация слушателей делается методом{' '}\n            <code>subscribe(listener)</code>\n          </li>\n        </ul>\n        <p>\n          Так как все состояние приложения хранится как один объект, стоит\n          подумать о форме состояния прежде чем писать какой-либо код.\n          Продумайте минимальное представление состояния приложения в виде\n          объекта.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <h3>3.1. Функция createStore</h3>\n        <p>\n          Для того чтобы создать хранилище, используется функция{' '}\n          <code>createStore</code>, которая принимает набор параметров и\n          возвращает созданное хранилище.\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            <code>reducer</code> - функция, которая возвращает следующее дерево\n            состояния, учитывая текущее дерево состояния и действие для\n            обработки.\n          </li>\n          <li>\n            <code>preloadedState</code> - начальное состояние, к примеру\n            сериализаванное состояние последнего пользовательского сеанса. Это\n            должен быть объект той же формы, что и, как минимум, часть\n            состояния.\n          </li>\n          <li>\n            <code>enhancer</code> - расширяет возможности хранилища при помощи\n            прослоек (middleware).\n          </li>\n        </ul>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Actions</h2>\n        <p>\n          <strong>\n            Действия (<code>actions</code>)\n          </strong>{' '}\n          - это объекты, которые помогают доставить данные из компонентов в\n          хранилище.\n        </p>\n        <ul>\n          <li>Хранят минимально необходимый набор информации.</li>\n          <li>\n            Должны иметь свойство <code>type</code>, которое указывает тип\n            выполняемого действия.\n          </li>\n          <li>\n            Помимо поля <code>type</code>, структура действия может быть\n            произвольной.\n          </li>\n        </ul>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Действия создаются функциями (<code>action creators</code>), которые\n          могут быть асинхронными и иметь побочные эффекты. В базовом варианте\n          они просто возвращают объект-дейтсвие.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>5. Reducers</h2>\n        <p>\n          <strong>Редюсеры (reducers)</strong> - это чистые функции, которые\n          принимают предыдущее состояние приложения и действие, а затем\n          возвращают новое следующее состояние.\n        </p>\n        <p>\n          Они определяют, как изменяется состояние приложения в ответ на\n          действия, отправленные в хранилище. Помните, что действия описывают\n          только то, что произошло, а не как изменяется состояние приложения.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <p>Вещи, которые нельзя делать внутри редюсера:</p>\n        <ul>\n          <li>Мутировать аргументы</li>\n          <li>Выполнять побочные эффекты, такие как API-запросы и т. п.</li>\n          <li>\n            Вызывать нечистые функции, например <code>Date.now()</code>\n          </li>\n        </ul>\n        <p>\n          Как выполнять побочные эффекты мы рассмотрим далее, пока что просто\n          помните - редюсер должен быть чистым. Получая те же аргументы, он\n          должен вычислить следующее состояние и вернуть его. Без сюрпризов.\n          Никаких побочных эффектов. Никаких мутаций. Просто рассчет.\n        </p>\n        <p>\n          Вот редьюсер, который принимает текущее состояние и действие как\n          аргументы, а затем возвращает следующее состояние.\n        </p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <p>Обратите внимание:</p>\n        <ul>\n          <li>\n            Мы создаем копию <code>state</code>, а не мутируем его.\n          </li>\n          <li>\n            Мы возвращаем предыдущее состояние по умолчанию. Важно вернуть\n            предыдущее состояние для любого неизвестного действия.\n          </li>\n        </ul>\n        <Link\n          link=\"https://medium.freecodecamp.org/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468\"\n          text='Why Redux need reducers to be \"pure functions\"'\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>6. React и Redux</h2>\n        <p>\n          Для того чтобы использовать React и Redux вместе, необходимо добавить\n          пакет\n          <code>react-redux</code>. Это набор компонентов связывающих\n          React-компоненты и Redux-хранилище через контекст Context.\n        </p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://react-redux.js.org/\"\n          text=\"Документация react-redux\"\n        />\n\n        <h3>6.1. Provider</h3>\n        <p>\n          Компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Provider\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          , оборачивает все дерево компонентов приложения и, используя контекст,\n          предоставляет <code>store</code> и его методы.\n        </p>\n        <CopyBlock text={code.code9} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://react-redux.js.org/api/provider\"\n          text=\"Документация Provider\"\n        />\n\n        <h3>6.2. connect()</h3>\n        <p>\n          Если какой-либо компонент хочет получить доступ к <code>store</code>,\n          он должен быть обернут в функцию <code>connect()</code>, которая\n          свяжет компонент и <code>store</code>. Предоставляет доступ к{' '}\n          <code>state</code> и <code>disaptch()</code>.\n        </p>\n        <p>\n          <code>connect</code> это HOC, он не изменяет переданный ему компонент,\n          а возвращает новый компонент связанный с хранилищем.\n        </p>\n        <CopyBlock text={code.code10} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          <code>mapStateToProps(state, [ownProps])</code> - функция соединяющая\n          часть состояния с пропами компонента. Таким образом, связанный\n          компонент будет иметь доступ к необходимой ему части состояния.\n        </p>\n        <ul>\n          <li>\n            Получает <code>state</code> как параметр и позволяет выбрать из\n            всего <code>state</code> только необходимые компоненту слайсы\n            (части).\n          </li>\n          <li>\n            Возвращает объект, свойства которого дополнят <code>props</code>{' '}\n            компонента.\n          </li>\n          <li>Вызывается каждый раз когда хранилище обновляется.</li>\n          <li>\n            Если нет необходимости подписываться на обновления, передаем{' '}\n            <code>null</code>.\n          </li>\n          <li>\n            Если функция объявлена &#8203;&#8203;как принимающая два параметра,\n            первым будет передана ссылка на <code>state</code>, а вторым ссылка\n            на пропы самого компонента.\n          </li>\n        </ul>\n        <CopyBlock text={code.code11} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          <code>mapDispatchToProps(dispatch, [ownProps])</code>- функция\n          соединяющая отправку действий с пропами компонента. Таким образом,\n          связанный компонент сможет отправлять действия посредством вызова\n          методов указанных в возвращаемом объекте.\n        </p>\n        <ul>\n          <li>\n            Получает ссылку на метод <code>dispatch</code> как параметр и\n            позволяет объявить методы для отправки действий.\n          </li>\n          <li>\n            Возвращает объект, свойства которого дополнят <code>props</code>{' '}\n            компонента.\n          </li>\n          <li>\n            Если функция объявлена &#8203;&#8203;как принимающая два параметра,\n            первым будет передана ссылка на <code>dispatch</code>, а вторым\n            ссылка на пропы самого компонента.\n          </li>\n        </ul>\n        <CopyBlock text={code.code12} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Если аргументы действия совпадают с параметрами объявляемого метода,\n          можно вместо функции передать объект. В таком случае{' '}\n          <code>connect</code> пройдет по ключам объекта и обернет их в{' '}\n          <code>dispatch</code>.\n        </p>\n        <CopyBlock text={code.code13} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://react-redux.js.org/api/connect\"\n          text=\"Документация connect\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>7. Redux DevTools</h2>\n        <p>\n          Чтобы упростить работу с Redux существуют Redux DevTools. Они помогают\n          отслеживать изменение состояния с течением времени, наблюдать за\n          отправкой дейтсвий и т. п. Естеcтвенно, это предназначено только для\n          разработки.\n        </p>\n        <Link\n          link=\"http://extension.remotedev.io/\"\n          text=\"Документация redux-devtools-extension\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>8. Организация хранилища</h2>\n        <p>\n          Необходимо хранить все состояние приложения в Redux? Можно ли\n          использовать\n          <code>setState()</code>? Как разработчик, ваша задача - определить, из\n          какого набора данных состоит приложение, и где их лучше хранить.\n        </p>\n        <p>\n          Некоторые общие правила для определения того, какие данные должны быть\n          помещены в Redux. Если ответ да, то есть смысл использовать хранилище,\n          а не локальное состояние.\n        </p>\n        <ul>\n          <li>Необходимы ли эти данные другим частям приложения?</li>\n          <li>\n            Необходимо ли на основе этих данных создавать дополнительные\n            производные?\n          </li>\n          <li>\n            Используются ли одни и те же данные для управления несколькими\n            компонентами?\n          </li>\n          <li>Есть ли необходимость в кешировании?</li>\n        </ul>\n\n        <h3>8.1. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://medium.freecodecamp.org/where-do-i-belong-a-guide-to-saving-react-component-data-in-state-store-static-and-this-c49b335e2a00\"\n              text=\"Where to Hold React Component Data: state, store, static, and this\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"http://jamesknelson.com/5-types-react-application-state/\"\n              text=\"The 5 Types Of React Application State\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>9. Композиция редюсеров</h2>\n        <p>\n          Еще одна полезная функция Redux - возможность делать композицию\n          редьюсеров, то есть совмещать много в один. Это позволяет удобно\n          поддерживать гораздо более сложные состояния в больших приложениях.\n          Для этого используется функция\n          <code>combineReducers()</code>.\n        </p>\n        <CopyBlock text={code.code14} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>10. Дополнительные материалы</h2>\n        <ul>\n          <li>\n            <Link link=\"https://redux.js.org/\" text=\"Документация Redux\" />\n          </li>\n          <li>\n            <Link\n              link=\"https://rajdee.gitbooks.io/redux-in-russian/content/\"\n              text=\"Документация Redux на русском\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://jaysoo.ca/2016/02/28/organizing-redux-application/\"\n              text=\"Three Rules For Structuring (Redux) Applications\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\"\n              text=\"A cartoon intro to Redux\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://egghead.io/courses/getting-started-with-redux\"\n              text=\"Getting Started with Redux by Dan Abramov\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\"\n              text=\"Building React Applications with Idiomatic Redux by Dan Abramov\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://medium.com/devschacht/redux-step-by-step-e6c42a9b00cd\"\n              text=\"Redux: шаг за шагом\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://blog.bitsrc.io/using-redux-actions-why-and-how-fd5834f13e31\"\n              text=\"Using Redux-Actions&#8202;—&#8202;Why and How?\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://trello-attachments.s3.amazonaws.com/59f1a4faa946cdc5b223e904/5b3942f050cf8a07452d6cf4/66ef29154a03d02375d1ffebf6dcb292/react-redux-workflow-graphical-cheat-sheet_v110.png\"\n              text=\"React-Redux workflow - graphical cheat sheet\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson11;\n","export const code1 = `const state = {\n  notes: [],\n  filter: '',\n  session: {\n    user: {\n      name: null,\n      avatar: null,\n    },\n    token: null,\n  },\n};`;\n\nexport const code2 = `createStore(reducer, [preloadedState], [enhancer])`;\n\nexport const code3 = `import { createStore } from 'redux';\n\n// Используем редюсер-болванку\nconst reducer = (state = {}, action) => state;\n\nconst store = createStore(reducer);`;\n\nexport const code4 = `const action = {\n  type: 'ADD_NOTE',\n  payload: {\n    text: 'Redux is awesome!',\n  },\n};`;\n\nexport const code5 = `const addNote = text => ({\n  type: 'ADD_NOTE',\n  payload: {\n    id: Date.now(),\n    text,\n  },\n});\n\nconst deleteNote = id => ({\n  type: 'DELETE_NOTE',\n  payload: {\n    id,\n  },\n});`;\n\nexport const code6 = `(previousState, action) => newState`;\n\nexport const code7 = `const initialState = [];\n\nfunction notesReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_NOTE':\n      return [...state, action.payload];\n\n    case 'DELETE_NOTE':\n      return state.filter(note => note.id !== action.payload.id);\n\n    default:\n      return state;\n  }\n}`;\n\nexport const code8 = `npm install react-redux`;\n\nexport const code9 = `import { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n// Болванка под reducer\nconst reducer = (state = {}, action) => state;\n\nconst store = createStore(reducer);\n\n<Provider store={store}>\n  <App />\n</Provider>;`;\n\nexport const code10 = `connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(Component)`;\n\nexport const code11 = `const mapStateToProps = (state, props) => ({\n  notes: state.notes,\n  currentFilter: state.filter,\n});`;\n\nexport const code12 = `const addNote = text => ({\n  type: 'ADD_NOTE',\n  payload: { text },\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addNote: text => dispatch(addNote(text)),\n});`;\n\nexport const code13 = `const addNote = text => ({\n  type: 'ADD_NOTE',\n  payload: { text },\n});\n\nconst mapDispatchToProps = { addNote };`;\n\nexport const code14 = `import { combineReducers } from 'redux';\nimport notesReducer from './notes';\nimport filterReducer from './filter';\n\nconst rootReducer = combineReducers({\n  notes: notesReducer,\n  filter: filterReducer,\n});\n\nexport default rootReducer;`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n"],"sourceRoot":""}