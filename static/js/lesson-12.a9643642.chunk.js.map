{"version":3,"sources":["pages/Lesson-12/index.js","pages/Lesson-12/code.js","components/Link/index.js"],"names":["Lesson12","className","Link","link","text","theme","hybrid","language","href","target","rel"],"mappings":"4JA2LeA,UArLE,kBACf,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,gDACA,kVACA,4BACE,yOACA,uYAGA,sMAEF,2BACE,kBAACC,EAAA,EAAD,CAAMC,KAAK,gCAAgCC,KAAK,kBADlD,ktBAMA,4BACE,yhBAIA,m0BAKA,2sBAKF,+pDAQA,kBAACF,EAAA,EAAD,CACEC,KAAK,gCACLC,KAAK,6FAKX,yBAAKH,UAAU,OACb,yBAAKA,UAAU,OACb,+HACA,iZAIA,kBAAC,IAAD,CAAWG,KC9DD,wsBD8DmBC,MAAOC,IAAQC,SAAS,QAErD,2FACA,sQACA,kBAAC,IAAD,CAAWH,KCxBD,+BDwBmBC,MAAOC,IAAQC,SAAS,QAErD,0FACA,4NACqC,+CADrC,0TAEsE,IACpE,kDAHF,2LAGkE,IAChE,+CAJF,mgBAOA,kBAACL,EAAA,EAAD,CACEC,KAAK,kDACLC,KAAK,8FAEP,wGACgB,+CADhB,gBAC8C,IAC5C,kDAFF,kZAKA,kBAAC,IAAD,CAAWA,KCzCD,wVDyCmBC,MAAOC,IAAQC,SAAS,QAErD,+5BAKA,iPAC2C,kDAA8B,IADzE,uQAEqD,IACnD,yCAHF,uGAKA,kBAAC,IAAD,CAAWH,KCpCD,4HDoCmBC,MAAOC,IAAQC,SAAS,QAErD,2RACA,kBAAC,IAAD,CAAWH,KC/BD,srBD+BmBC,MAAOC,IAAQC,SAAS,QAErD,8FACA,8fAIA,kBAACL,EAAA,EAAD,CACEC,KAAK,gDACLC,KAAK,4FAEP,kBAAC,IAAD,CAAWA,KCFD,kbDEmBC,MAAOC,IAAQC,SAAS,QAErD,8dAIA,4BACE,8DACQ,4CADR,+CACwC,2CADxC,0RAIA,oWAC+D,IAC7D,sCAFF,8CAGE,6CAGJ,kBAAC,IAAD,CAAWH,KCFD,+JDEmBC,MAAOC,IAAQC,SAAS,QAErD,2SACyD,IACvD,gDAFF,qMAIA,kBAAC,IAAD,CAAWH,KCHD,ogBDGmBC,MAAOC,IAAQC,SAAS,QAErD,+FACA,qdAGE,6CAHF,yCAGkC,wCAHlC,6jCAQA,kBAACL,EAAA,EAAD,CACEC,KAAK,iDACLC,KAAK,6FAEP,gIACoB,iDADpB,wuBAKA,kBAAC,IAAD,CAAWA,KCID,uUDJmBC,MAAOC,IAAQC,SAAS,QAErD,mWAC+D,IAC7D,4CAFF,wbAIoB,sCAJpB,4DAIkD,IAChD,4CALF,gVAQA,kBAAC,IAAD,CAAWH,KCIA,8JDJmBC,MAAOC,IAAQC,SAAS,QAEtD,2OACA,kBAAC,IAAD,CAAWH,KCMA,4cDNmBC,MAAOC,IAAQC,SAAS,UAI1D,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,uEACA,iZAGA,kBAAC,IAAD,CAAWG,KCeA,mTDfmBC,MAAOC,IAAQC,SAAS,QACtD,kBAACL,EAAA,EAAD,CACEC,KAAK,qEACLC,KAAK,qB,gCEpLf,oBAQeF,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACX,uBAAGI,KAAML,EAAMM,OAAO,SAASC,IAAI,uBAChCN","file":"static/js/lesson-12.a9643642.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson12 = () => (\n  <div className=\"container lesson-12\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Redux Toolkit</h2>\n        <p>При использовании библиотеки Redux есть три основные проблемы.</p>\n        <ul>\n          <li>Сложный процесс настройки Redux-хранилища</li>\n          <li>\n            Необходимость добавлять стандартный набор дополнительных пакетов\n          </li>\n          <li>Большой объем бойлерплейт кода</li>\n        </ul>\n        <p>\n          <Link link=\"https://redux-toolkit.js.org/\" text=\"Redux Toolkit\" /> это\n          официальная библиотека для эффективной разработки с использованием\n          Redux, которая предназначена для стандартизации написания\n          Redux-логики.\n        </p>\n        <ul>\n          <li>\n            Позволяет сосредоточиться на написании основной логики приложения,\n            не тратя время на настройку.\n          </li>\n          <li>\n            Включает в себя утилиты для упрощения основных задач. Таких как\n            настройка хранилища, создание редюсеров, иммутабельное обновление\n            данных и многое другое.\n          </li>\n          <li>\n            Предоставляет стандартный набор настроек для хранилища и включает в\n            себя наиболее часто используемые дополнения из Redux-экосистемы.\n          </li>\n        </ul>\n        <p>\n          Библиотека не предназначена для решения всех возможных проблем и\n          намеренно ограничена в объеме. Такие решения как HTTP-запросы,\n          структура папок и файлов, управление связями сущностей в хранилище и\n          т. д. ложаться на плечи разработчика. Тем не менее, Redux Toolkit\n          будет полезен для всех стандартных задач, поможет упростить и улучшить\n          Redux-код.\n        </p>\n        <Link\n          link=\"https://redux-toolkit.js.org/\"\n          text=\"Документация Redux Toolkit\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Использование Redux Toolkit</h2>\n        <p>\n          Возьмем готовую Redux-логику таймера и провередм рефакторинг используя\n          Redux Toolkit.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.1. Установка</h3>\n        <p>Библиотека доступна как стандартный NPM-пакет.</p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.2. Функия configureStore()</h3>\n        <p>\n          Обычно хранилище создается вызовом <code>createStore()</code>, в\n          который передается корневой редюсер. Redux Toolkit содержит функцию{' '}\n          <code>configureStore()</code>, которая оборачивает оригинальный{' '}\n          <code>createStore()</code>, и настраивает некоторые полезные\n          инструменты разработки как часть процесса создания хранилища.\n        </p>\n        <Link\n          link=\"https://redux-toolkit.js.org/api/configureStore\"\n          text=\"Документация configureStore()\"\n        />\n        <p>\n          Заменим вызов <code>createStore()</code> на{' '}\n          <code>configureStore()</code>, который ожидает один аргумент - объект\n          с набором строго именованных свойств.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          На первый вгляд практически одно и тоже, тем не менее, после\n          рефакторинга, под капотом сразу были настроены инструменты\n          разработчика (Redux DevTools) и некоторые другие полезные функции.\n        </p>\n        <p>\n          Можно передать больше одного редюсера, и <code>configureStore()</code>{' '}\n          сам создаст корневой редюсер. Для этого в свойство{' '}\n          <code>reducer</code> передается объект.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <p>Теперь Redux-код таймера выглядит следующим образом.</p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.3. Функция createAction()</h3>\n        <p>\n          Функция createAction() в качестве аргумента принимает строку\n          описывающую тип действия и возвращает action creator.\n        </p>\n        <Link\n          link=\"https://redux-toolkit.js.org/api/createAction\"\n          text=\"Документация createAction()\"\n        />\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          А где взять тип действия, например для использования внутри редюсера?\n          Есть два способа.\n        </p>\n        <ul>\n          <li>\n            Метод <code>toString()</code> функции <code>increment</code> был\n            переопределен и возвращает строку типа действия.\n          </li>\n          <li>\n            Значение типа действия можно получить обратившись к свойству{' '}\n            <code>type</code> функции\n            <code>increment</code>\n          </li>\n        </ul>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Продолжим рефакторить Redux-код таймера. Использование{' '}\n          <code>createAction()</code> избавит нас от нескольких строк кода.\n        </p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.4. Функция createReducer()</h3>\n        <p>\n          Наиболее распространенным подходом создания редюсера является проверка\n          свойства\n          <code>action.type</code> внутри <code>switch</code> и выполнение\n          определенной логики для каждого типа действия. К тому же редюсер\n          определяет начальное значение состояния и возвращает полученное\n          состояние, если он не должен обрабатывать дейтсвие такого типа.\n        </p>\n        <Link\n          link=\"https://redux-toolkit.js.org/api/createReducer\"\n          text=\"Документация createReducer()\"\n        />\n        <p>\n          Используя функцию <code>createReducer()</code> можно создавать\n          редюсеры передав объект свойств специального формата, где каждый ключ\n          это тип действия, а значение - это редюсер для этого типа.\n        </p>\n        <CopyBlock text={code.code9} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Так как синтаксис вычисляемых свойств объекта вызывает метод{' '}\n          <code>toString()</code>\n          указанной переменной, можно просто использовать имя функции без\n          указания свойства <code>type</code>, ведь метод{' '}\n          <code>toString()</code> наших action creators был переопределен так,\n          чтобы возвращать тип дейсвтвия.\n        </p>\n        <CopyBlock text={code.code10} theme={hybrid} language=\"jsx\" />\n\n        <p>Применим этот синтаксис к коду таймера.</p>\n        <CopyBlock text={code.code11} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Пример</h2>\n        <p>\n          В интерактивном редакторе можно посмотреть код и живую версию таймера.\n        </p>\n        <CopyBlock text={code.code12} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://codesandbox.io/s/timer-with-redux-toolkit-sze3f?from-embed\"\n          text=\"CodeSandBox\"\n        />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson12;\n","export const code1 = `import { createStore, combineReducers } from 'redux';\n\n// Action types\nconst INCREMENT = 'timer/increment';\nconst DECREMENT = 'timer/decrement';\n\n// Action creators\nfunction increment(value) {\n  return {\n    type: INCREMENT,\n    payload: value,\n  };\n}\n\nfunction decrement(value) {\n  return {\n    type: DECREMENT,\n    payload: value,\n  };\n}\n\n// Reducer\nfunction timer(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + action.payload;\n\n    case DECREMENT:\n      return state - action.payload;\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  timer,\n});\n\n// Store\nconst store = createStore(rootReducer);`;\n\nexport const code2 = `npm install @reduxjs/toolkit`;\n\nexport const code3 = `// До\nimport { createStore } from 'redux';\n\nconst store = createStore(timer);\n\n// После\nimport { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst rootReducer = combineReducers({\n  timer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});`;\n\nexport const code4 = `import { configureStore } from '@reduxjs/toolkit';\n\nconst store = configureStore({\n  reducer: {\n    timer,\n  },\n});`;\n\nexport const code5 = `import { configureStore, combineReducers } from '@reduxjs/toolkit';\n\n// Action types\nconst INCREMENT = 'timer/increment';\nconst DECREMENT = 'timer/decrement';\n\n// Action creators\nfunction increment(value) {\n  return {\n    type: INCREMENT,\n    payload: value,\n  };\n}\n\nfunction decrement(value) {\n  return {\n    type: DECREMENT,\n    payload: value,\n  };\n}\n\n// Reducer\nfunction timer(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + action.payload;\n    case DECREMENT:\n      return state - action.payload;\n    default:\n      return state;\n  }\n}\n\n// Store\nconst store = configureStore({\n  reducer: {\n    timer,\n  },\n});`;\n\nexport const code6 = `// До\nconst INCREMENT = 'timer/increment';\n\nfunction increment(value) {\n  return {\n    type: INCREMENT,\n    payload: value,\n  };\n}\nconsole.log(increment(5)); // {type: \"timer/increment\", payload: 5}\n\n// После\nimport { createAction } from '@reduxjs/toolkit';\n\nconst increment = createAction('timer/increment');\nconsole.log(increment(5)); // {type: \"timer/increment\", payload: 5}`;\n\nexport const code7 = `const increment = createAction('INCREMENT');\n\nconsole.log(increment.toString()); // \"timer/increment\"\nconsole.log(increment.type); // \"timer/increment\"`;\n\nexport const code8 = `import { configureStore, createAction } from '@reduxjs/toolkit';\n\n// Action creators\nconst increment = createAction('timer/increment');\nconst decrement = createAction('timer/decrement');\n\n// Reducer\nfunction timer(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + action.payload;\n\n    case DECREMENT:\n      return state - action.payload;\n\n    default:\n      return state;\n  }\n}\n\n// Store\nconst store = configureStore({\n  reducer: {\n    timer,\n  },\n});`;\n\nexport const code9 = `import { createReducer } from '@reduxjs/toolkit';\n\nconst increment = createAction('timer/increment');\nconst decrement = createAction('timer/decrement');\n\nconst timer = createReducer(0, {\n  [increment.type]: (state, action) => state + action.payload,\n  [decrement.type]: (state, action) => state - action.payload,\n});`;\n\nexport const code10 = `const timer = createReducer(0, {\n  [increment]: (state, action) => state + action.payload,\n  [decrement]: (state, action) => state - action.payload,\n});`;\n\nexport const code11 = `import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\n\n// Action creators\nconst increment = createAction('timer/increment');\nconst decrement = createAction('timer/decrement');\n\n// Reducer\nconst timer = createReducer(0, {\n  [increment]: (state, action) => state + action.payload,\n  [decrement]: (state, action) => state - action.payload,\n});\n\n// Store\nconst store = configureStore({\n  reducer: {\n    timer,\n  },\n});`;\n\nexport const code12 = `import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Timer from './Timer';\nimport store from './redux/store';\nimport './global.css';\n\nrender(\n  <Provider store={store}>\n    <Timer />\n  </Provider>,\n  document.getElementById('root'),\n);`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n"],"sourceRoot":""}