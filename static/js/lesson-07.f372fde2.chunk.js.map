{"version":3,"sources":["pages/Lesson-07/code.js","pages/Lesson-07/index.js","components/Link/index.js","components/Image/index.js","components/Alert/index.js"],"names":["code3","Lesson07","className","Image","filename","Link","link","text","theme","hybrid","language","code","Alert","href","target","rel","src","process","alt","loading","children","Provider","value","size"],"mappings":"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","file":"static/js/lesson-07.f372fde2.chunk.js","sourcesContent":["export const code1 = `npm install react-router-dom`;\n\nexport const code2 = `import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.querySelector('#root'),\n);`;\n\nexport const code3 = `import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst App = () => (\n  <>\n    <Route path=\"/\" exact component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/contact\" component={Contact} />\n  </>\n);`;\n\nexport const code4 = `// ✅ Хорошо\n<Route path=\"/about\" component={About} />\n\n// ❌ Плохо\n<Route\n  path=\"/about\"\n  component={props => <About {...props} extraProp=\"amazing prop\" />}\n/>`;\n\nexport const code5 = `<Route\npath=\"/about\"\nrender={props => <About {...props} extraPropName=\"value\" />}\n/>`;\n\nexport const code6 = `import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nconst App = () => (\n  <div>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route component={NotFound} />\n    </Switch>\n  </div>\n);`;\n\nexport const code7 = `<Link to=\"/books\">Books</Link>\n\n<Link to=\"/books?category=adventure#treasure-island\">Adventure books</Link>`;\n\nexport const code8 = `<Link\n  to={{\n    pathname: '/books',\n    search: '?category=adventure',\n    hash: '#treasure-island',\n    state: { from: '/dashboard' },\n  }}\n/>`;\n\nexport const code9 = `<NavLink to=\"/books\" className=\"link\" activeClassName=\"active-link\">\n  Books\n</NavLink>`;\n\nexport const code10 = `{\n  key: 'ac3df4',\n  pathname: '/books',\n  search: '?sortby=latest',\n  hash: '#comments',\n  state: {\n    from: '/login'\n  }\n}`;\n\nexport const code11 = `https://app.com/articles`;\n\nexport const code12 = `https://app.com/articles?category=health&sortBy=latest`;\n\nexport const code13 = `{\n  key: 'ac3df4',\n  pathname: '/articles',\n  search: '?category=health&sortBy=latest',\n  hash: ''\n}`;\n\nexport const code14 = `import queryString from 'query-string';\n\nconst queryParams = queryString.parse(props.location.search);`;\n\nexport const code15 = `onCategoryChange = category => {\n  this.props.history.push({\n    pathname: this.props.location.pathname,\n    search: \\`category=\\${category}\\`,\n  });\n};`;\n\nexport const code16 = `const getCategoryFromProps = props => queryString.parse(props.location.search).category;\n\ncomponentDidUpdate(prevProps) {\n  const prevCategory = getCategoryFromProps(prevProps);\n  const nextCategory = getCategoryFromProps(this.props);\n\n  if (prevCategory !== nextCategory) {\n    this.fetchArticles(nextCategory);\n  }\n}`;\n\nexport const code17 = `componentDidMount() {\n  /*\n  * При маунте компонента проверяем наличие параметра \\`category\\` в строке запроса.\n  */\n  const category = getCategoryFromProps(this.props);\n\n  /*\n  * Если параметра нет, делаем \\`history.replace\\` с текущим маршрутом,\n  * но добавляем категорию \\`all\\`, чтобы забрать все статьи с бекенда.\n  * При этом перезаписываем текущую страницу истории.\n  */\n  if (!category) {\n    this.props.history.replace({\n      pathname: this.props.location.pathname,\n      search: \\`category=all\\`,\n    });\n\n    return;\n  }\n\n  /*\n  * Если при рендере такой параметр уже есть, например пользователь зашел по\n  * сохраненной ссылке, делаем HTTP-запрос за статьями.\n  */\n  fetchArticlesByCategory(category).then(articles =>\n    this.setState({ articles }),\n  );\n}`;\n\nexport const code18 = `https://app.com/articles/:articleId`;\n\nexport const code19 = `<Link to={{\n  pathname: \\`/articles/\\${id}\\`,\n  state: { from: this.props.location },\n}}>\n  Article title\n</Link>`;\n\nexport const code20 = `handleGoBack = () => {\n  this.props.history.push(this.props.location.state.from);\n};`;\n\nexport const code21 = `handleGoBack = () => {\n  const { state } = this.props.location;\n  const { category } = this.state;\n\n  if (state) {\n    this.props.history.push(state.from);\n    return;\n  }\n\n  this.props.history.push({\n    pathname: '/articles',\n    search: \\`?category=\\${category}\\`,\n  });\n};`;\n","import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Alert from '../../components/Alert';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson07 = () => (\n  <div className=\"container lesson-07\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Маршрутизация</h2>\n        <p>\n          Отличающее преимущество веб-приложения от десктоп это наличие URL, при\n          переходе по которому, пользователь оказывается в определенной части\n          приложения. Так можно сохранить закладку или передать ссылку другому\n          пользователю, при этом ему будет отображен один и тот же интерфейс (за\n          исключением приватных данных).\n        </p>\n        <p>\n          <strong>Маршрутизация (routing)</strong> - это не побочный эффект при\n          написании приложения, наоборот, грамотную архитектуру навигации\n          необходимо продумывать в первую очередь.\n        </p>\n\n        <h3>1.1. Структура URL-строки</h3>\n        <p>\n          Аналогией URL-строки может быть адрес по которому вы проживаете:\n          улица, дом, квартира. У каждого состояния интерфейса должен быть свой\n          адрес, свой URL. То, что видит пользователь, состояние интерфейса,\n          должно быть описано в URL.\n        </p>\n        <Image filename=\"url-string.jpg\" />\n\n        <ul>\n          <li>\n            <strong>\n              <code>https://</code>\n            </strong>{' '}\n            - протокол\n          </li>\n          <li>\n            <strong>\n              <code>mysite.com/</code>\n            </strong>{' '}\n            - хост\n          </li>\n          <li>\n            <strong>\n              <code>books/e3q76gm9lzk</code>\n            </strong>{' '}\n            - путь, то где мы находимся в приложении\n          </li>\n          <li>\n            <strong>\n              <code>e3q76gm9lzk</code>\n            </strong>{' '}\n            - url-параметр. Параметры бывают динамическими или статическими\n          </li>\n          <li>\n            <strong>\n              <code>?</code>\n            </strong>{' '}\n            - символ начала строки запроса\n          </li>\n          <li>\n            <strong>\n              <code>?category=adventure&amp;status=unread</code>&#8203;\n            </strong>{' '}\n            - строка запроса\n          </li>\n          <li>\n            <strong>\n              <code>category=adventure</code>\n            </strong>{' '}\n            - пара параметр=значение\n          </li>\n          <li>\n            <strong>\n              <code>&amp;</code>\n            </strong>{' '}\n            - символ \"И\", разделяет параметры строки запроса\n          </li>\n          <li>\n            <strong>\n              <code>#comments</code>\n            </strong>{' '}\n            - якорь (хеш), определяет положение на странице\n          </li>\n        </ul>\n\n        <h3>1.2. История навигации</h3>\n        <p>\n          <strong>История навигации</strong> - то как мы переходим ссылкам, как\n          переходы хранятся и парсятся. От типа истории зависит метод ее\n          хранения и изменения.\n        </p>\n        <p>\n          Если вы хотите понять React Router, рекомендуется ознакомиться с{' '}\n          <Link\n            link=\"https://medium.com/@pshrmn/a-little-bit-of-history-f245306f48dd\"\n            text=\"HTML5 History API\"\n          />\n          . Более конкретно, c пакетом{' '}\n          <Link\n            link=\"https://github.com/ReactTraining/history\"\n            text=\"history\"\n          />\n          , который предоставляет основные функциональные возможности для React\n          Router, позволяя одностраничным приложениям легко добавлять навигацию\n          на стороне клиента.\n        </p>\n        <p>Существует несколько типов истории.</p>\n        <ul>\n          <li>\n            <strong>Browser history</strong> - использует HTML5 History API,\n            стандарт управления историей браузера из JavaScript.\n          </li>\n          <li>\n            <strong>Hash history</strong> - в старых браузерах не поддерживается\n            HTML5 History API, поэтому для них существует эта реализация.\n          </li>\n          <li>\n            <strong>Memory history</strong> - позволяет использовать историю\n            сессии в памяти, вне окна браузера. К примеру для тестирования\n            логики без интерфейса и в средах без DOM, к примеру React Native.\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. React Router</h2>\n        <ul>\n          <li>\n            <strong>Browser history</strong> - использует HTML5 History API,\n            стандарт управления историей браузера из JavaScript.\n          </li>\n          <li>\n            <strong>Hash history</strong> - в старых браузерах не поддерживается\n            HTML5 History API, поэтому для них существует эта реализация.\n          </li>\n          <li>\n            <strong>Memory history</strong> - позволяет использовать историю\n            сессии в памяти, вне окна браузера. К примеру для тестирования\n            логики без интерфейса и в средах без DOM, к примеру React Native.\n          </li>\n        </ul>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          В React Router есть три типа компонентов: компонент маршрутизатора,\n          компоненты согласования маршрутов и компоненты навигации.\n        </p>\n        <Link\n          link=\"https://reacttraining.com/react-router/web/guides/philosophy\"\n          text=\"Документация React Router\"\n        />\n\n        <h3>2.1. BrowserRouter</h3>\n        <p>\n          В основе каждого одностраничного приложения стоит маршрутизатор.\n          Компонент\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>BrowserRouter\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          создает раутер и объект <code>history</code>, чтобы синхронизировать\n          интерфейс с URL-адресом. Используя контекст, передает данные о текущем\n          URL всему поддереву компонентов.\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://reacttraining.com/react-router/web/api/BrowserRouter\"\n          text=\"Документация BrowserRouter\"\n        />\n\n        <h3>2.2. Route</h3>\n        <p>\n          Компонент позволяющий связать определенный URL и компонент для\n          рендера. Его задача заключается в том, чтобы отобразить некоторый\n          интерфес, когда\n          <code>location.pathname</code> соответствует значению пропа{' '}\n          <code>path</code>. Компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Route\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          можно использовать в любом месте где необходимо рендерить контент на\n          основе текущего URL.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <Alert>\n          <p>\n            Согласование маршрута выполняется путем сопоставления пропа{' '}\n            <code>path</code> и текущего значения <code>location.pathname</code>\n            . Если значение\n            <code>location.pathname</code> начинается на указанный путь в{' '}\n            <code>path</code>,{' '}\n            <code>\n              <span className=\"token tag\">\n                <span className=\"token tag\">\n                  <span className=\"token punctuation\">&lt;</span>Route\n                </span>\n                <span className=\"token punctuation\">&gt;</span>\n              </span>\n            </code>{' '}\n            отрендерит указанный компонент, в противном случае вернет{' '}\n            <code>null</code>.\n          </p>\n        </Alert>\n\n        <p>\n          Когда <code>location.pathname</code> начинается на{' '}\n          <code>'/about'</code>, первый и третий рауты отрендерят{' '}\n          <code>null</code>, а второй отрендерит компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>About\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          .\n        </p>\n        <ul>\n          <li>\n            Проп <code>exact</code> указывает на необходимость точного\n            совпадения <code>path</code> и<code>location.pathname</code>\n          </li>\n          <li>\n            <code>\n              <span className=\"token tag\">\n                <span className=\"token tag\">\n                  <span className=\"token punctuation\">&lt;</span>Route\n                </span>\n                <span className=\"token punctuation\">&gt;</span>\n              </span>\n            </code>{' '}\n            без указанного <code>path</code> всегда рендерит компонент\n          </li>\n        </ul>\n\n        <h4>2.2.1. Проп component</h4>\n        <p>\n          Используется когда компонент необходимо отрендерить без передачи\n          дополнительных пропсов. Стандартные пропсы <code>match</code>,{' '}\n          <code>location</code> и <code>history</code> будут переданы компоненту\n          автоматически.\n        </p>\n        <p>\n          Для создания компонента используется{' '}\n          <code>React.createElement()</code>, это означает, что если вместо\n          ссылки на компонент будет передана анонимная функция, для каждого\n          ре-рендера будет создан новый компонент. Это приведет к\n          размонтированию существующего компонента, созданию и монтированию\n          нового на каждом рендере, вместо обновления существующего компонента.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <h4>2.2.2. Проп render</h4>\n        <p>\n          Позволяет использовать инлайн-функцию вместо компонента без\n          нежелательного эффекта ре-рендера как в случае с{' '}\n          <code>component</code>. Используется тогда, когда компоненту\n          необходимо передать дополнительные пропсы, кроме тех что передает\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Route\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          .\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://reacttraining.com/react-router/web/api/Route\"\n          text=\"Документация Route\"\n        />\n\n        <h3>2.3. Switch</h3>\n        <p>\n          Группирует и отображает первый дочерний маршрут, <code>path</code>{' '}\n          которого соответствует текущему <code>location.pathname</code>,\n          игнорруя все последующие.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.4. Redirect</h3>\n        <p>\n          Позволяет декларативно отрендерить компонент который во время маунта\n          перенаправит пользователя по указанному маршруту. Под капотом\n          использует императивный интерфейс <code>history</code>.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            По умолчанию подменяет текущую запись в истории, для того чтобы\n            добавить новую запись на верх стека можно передать проп{' '}\n            <code>push</code>.\n          </li>\n          <li>\n            Вместо строки, проп <code>to</code> может принимать полноценный\n            объект формата\n            <code>location</code>.\n          </li>\n        </ul>\n        <Link\n          link=\"https://reacttraining.com/react-router/web/api/Redirect\"\n          text=\"Документация Redirect\"\n        />\n\n        <h3>2.5. Link и NavLink</h3>\n        <p>\n          Для создания навигации нельзя использовать обычный HTML-тег{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>a\n              </span>{' '}\n              <span className=\"token attr-name\">link</span>\n              <span className=\"token attr-value\">\n                <span className=\"token punctuation\">=</span>\n                <span className=\"token punctuation\">\"</span>/about\n                <span className=\"token punctuation\">\"</span>\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          . При клике, вместо того чтобы изменить URL на текущей странице, и\n          позволить раутеру выполнить навигацию на стороне клиента, браузер\n          выполнит GET-запрос и обновит страницу, а это не то, что нам нужно.\n        </p>\n        <p>\n          Компоненты{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Link\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          и{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>NavLink\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          используются для создания ссылок. Они рендерят HTML-тег{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>a\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          , но с расширенным функционалом клика, используя возможности объекта{' '}\n          <code>history</code> по замене URL.\n        </p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Проп <code>to</code> можно передавать в виде строки описывающей{' '}\n          <code>link</code> будущей ссылки, или как объект <code>location</code>{' '}\n          со следующими (необязательными) свойствами:\n        </p>\n        <ul>\n          <li>\n            <code>pathname</code> - строка, путь для ссылки.\n          </li>\n          <li>\n            <code>search</code> - строковое представление параметров запроса.\n          </li>\n          <li>\n            <code>hash</code> - хэш для добавления в конец URL.\n          </li>\n          <li>\n            <code>state</code> - объект, который будет записан в{' '}\n            <code>location.state</code> после перехода по ссылке.\n          </li>\n        </ul>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>NavLink\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          отличается от{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Link\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          только тем, что может иметь дополнительные стили, если текущий URL\n          совпадает со значением пропа <code>to</code>.\n        </p>\n        <ul>\n          <li>\n            <code>activeClassName</code> - строка классов для объеденения с{' '}\n            <code>className</code> когда элемент активен.\n          </li>\n          <li>\n            <code>activeStyle</code> - объект инлайн стилей для добавления к\n            элементу когда он активен.\n          </li>\n          <li>\n            <code>exact</code> - когда <code>true</code>, активные классы/стили\n            будут применяться только в том случае, если местоположение точно\n            совпадает со значением пропа <code>to</code>.\n          </li>\n        </ul>\n        <CopyBlock text={code.code9} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            <Link\n              link=\"https://reacttraining.com/react-router/web/api/Link\"\n              text=\"Документация Link\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://reacttraining.com/react-router/web/api/NavLink\"\n              text=\"Документация NavLink\"\n            />\n          </li>\n        </ul>\n\n        <h3>2.6. Route props</h3>\n        <p>\n          Компоненту отрендеренному через{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Route\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          будет передано несколько специальных пропсов хранящих много полезной\n          информации.\n        </p>\n        <ul>\n          <li>\n            <code>match</code> — объект с информацией о том как совпали{' '}\n            <code>path</code> и <code>location.pathname</code>\n          </li>\n          <li>\n            <code>location</code> - объект хранящий информацию о текущем URL\n          </li>\n          <li>\n            <code>history</code> - объект истории, созданный самим раутером\n          </li>\n        </ul>\n\n        <h4>2.6.1. Проп match</h4>\n        <p>\n          Объект, хранит информацию о том, как <code>path</code> совпал с{' '}\n          <code>location.pathname</code>. Содержит следующие свойства.\n        </p>\n        <ul>\n          <li>\n            <code>params</code> - объект пар <code>ключ:значение</code>,\n            соответствующих динамическим параметрам URL.\n          </li>\n          <li>\n            <code>isExact</code> - указыват на точное соотвествие{' '}\n            <code>path</code> и <code>location.pathname</code>.\n          </li>\n          <li>\n            <code>path</code> - паттерн пути на который замачился{' '}\n            <code>\n              <span className=\"token tag\">\n                <span className=\"token tag\">\n                  <span className=\"token punctuation\">&lt;</span>Route\n                </span>\n                <span className=\"token punctuation\">&gt;</span>\n              </span>\n            </code>\n            . Используется для создания вложенных маршрутов.\n          </li>\n          <li>\n            <code>url</code> - совпавшая часть URL-адреса. Используется для\n            создания вложенной навигации.\n          </li>\n        </ul>\n\n        <h4>2.6.2. Проп location</h4>\n        <p>\n          Объект, свойства которого описывают текущее местоположение, путь куда\n          будет произведен переход или откуда пришли на текущий маршрут. Можно\n          использовать в том числе для проверки в{' '}\n          <code>componentDidUpdate</code> изменился ли текущий URL.\n        </p>\n        <CopyBlock text={code.code10} theme={hybrid} language=\"jsx\" />\n\n        <h4>2.6.3. Проп history</h4>\n        <p>\n          Объект истории со свойствами и методами для программной навигации.\n          Используется для перенаправлений.\n        </p>\n        <ul>\n          <li>\n            <code>history.push(path [, state])</code> - добавляет новую запись\n            на стек записей истории.\n          </li>\n          <li>\n            <code>history.replace(path [, state])</code> - подменяет текущую\n            запись на новую на стеке записей истории.\n          </li>\n        </ul>\n        <Link\n          link=\"https://reacttraining.com/react-router/web/api/Route/route-props\"\n          text=\"Документация Route props\"\n        />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Строка запроса</h2>\n        <p>\n          В строке запроса можно указывать дополнительную информацию о текущем\n          маршруте. Например, если мы просматриваем страницу новостных статей,\n          маршрут может выглядеть так.\n        </p>\n        <CopyBlock text={code.code11} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Если есть категории выбора статей по жанру и времени издания, храним\n          выбранные опции в строке запроса.\n        </p>\n        <CopyBlock text={code.code12} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Строка запроса содержит 2 параметра: название категории и порядок\n          сортировки статей. При переходе по такому маршруту, можно сделать\n          HTTP-запрос на бэкенд, получив только статьи необходимой категории, и\n          отсортировать их по полю даты издания.\n        </p>\n        <p>\n          Текущее значение строки запроса хранится в пропе <code>location</code>\n          .\n        </p>\n        <CopyBlock text={code.code13} theme={hybrid} language=\"jsx\" />\n        <Link\n          link=\"https://reacttraining.com/react-router/web/api/location\"\n          text=\"Документация location\"\n        />\n\n        <h3>3.1. Извлечение параметров</h3>\n        <p>\n          Чтобы получить значения параметров, можно использовать возможности\n          нативного класса{' '}\n          <Link\n            link=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\"\n            text=\"URLSearchParams\"\n          />\n          , а также библиотеки{' '}\n          <Link link=\"https://www.npmjs.com/package/qs\" text=\"qs\" /> или{' '}\n          <Link\n            link=\"https://www.npmjs.com/package/query-string\"\n            text=\"query-string\"\n          />\n          . Любой метод позволит сделать парс строки запроса и получить объект с\n          парами <code>ключ:значение</code>.\n        </p>\n        <CopyBlock text={code.code14} theme={hybrid} language=\"jsx\" />\n\n        <h3>3.2. Изменение параметров</h3>\n        <p>\n          Допустим, для выбора категории статей используется{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>select\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          . При выборе опции необходимо обновлять URL используя метод{' '}\n          <code>history.push()</code> для добавления новой записи в журнал\n          истории.\n        </p>\n        <p>\n          Берем текущее значение <code>location.pathname</code> и обновляем{' '}\n          <code>search</code>.\n        </p>\n        <CopyBlock text={code.code15} theme={hybrid} language=\"jsx\" />\n\n        <h3>3.3. Отслеживание изменений</h3>\n        <p>\n          Если меняется строка запроса, компоненту пробрасываются новые пропсы,\n          и в методе\n          <code>componentDidUpdate()</code> можно проверить изменилась ли\n          категория и порядок сортировки. Если изменились, делаем HTTP-запрос\n          или сортируем текущие статьи.\n        </p>\n        <CopyBlock text={code.code16} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Редиректы</h2>\n        <p>\n          Перенаправления это удобный инструмент навигации пользователя между\n          маршрутами приложения. Для их реализации используется компонент{' '}\n          <code>\n            <span className=\"token tag\">\n              <span className=\"token tag\">\n                <span className=\"token punctuation\">&lt;</span>Redirect\n              </span>\n              <span className=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          или методы\n          <code>history.push()</code> и <code>history.replace()</code>.\n        </p>\n\n        <h3>4.1. Проп history</h3>\n        <p>\n          Важно знать раличие методов <code>push</code> и <code>replace</code>.\n        </p>\n        <ul>\n          <li>\n            <code>history.push()</code> - добавит новую запись в журнал истории,\n            пользователь может вернуться на тот маршрут с которого пришел.\n          </li>\n          <li>\n            <code>history.replace()</code> - перезапишет текущую запись в\n            журнале истории затерев текущую, пользователь не сможет вернутся на\n            маршрут с которого пришел.\n          </li>\n        </ul>\n        <p>\n          Продолжим работать со статьями. При рендере раута{' '}\n          <code>/articles</code> есть категории статей, но при первом рендере\n          маршрута еще нет строки запроса с параметром\n          <code>category</code>. Именно поэтому необходимо сделать редирект, при\n          этом перезаписав текущую страницу истории, чтобы пользователь не мог\n          вернуться на страницу без параметров запроса.\n        </p>\n        <CopyBlock text={code.code17} theme={hybrid} language=\"jsx\" />\n\n        <h3>4.2. Свойство location.state</h3>\n        <p>\n          Позволяет передавать кастомные данные между маршрутами. Например\n          список статей это ссылки, при клике в ссылку переходим на новый\n          маршрут - страницу статьи.\n        </p>\n        <CopyBlock text={code.code18} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Тогда, если пользователь пришел с{' '}\n          <code>https://app.com/articles?category=sports</code>, и захочет\n          вернуться на сраницу всех статей, нажав стрелку \"Обратно\", он попадет\n          куда надо. Но что если необходимо реализовать кнопку \"Обратно к\n          статьям\" в интерфейсе приложения, как узнать откуда мы пришли?\n        </p>\n        <p>\n          Каждую статью сделаем ссылкой, добавив в свойство <code>state</code>{' '}\n          информацию о текущем маршруте.\n        </p>\n        <CopyBlock text={code.code19} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Тогда в компоненте статьи можем получить эту информацию и при клике на\n          кнопку \"Обратно к статьям\" перенаправить пользователя на предыдущий\n          маршрут.\n        </p>\n        <CopyBlock text={code.code20} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Нужно учитывать ситуацию когда пользователь перешел на страницу статьи\n          по сохраненный ссылке, и в текущей сессии не был на странице всех\n          статей. В свойстве <code>location.state</code> не будет объекта, и\n          попытка доступа к <code>state.from</code>\n          приведет к ошибке выполнения скрипта.\n        </p>\n        <p>\n          Поэтому необходимо проверить <code>location.state</code>. Если{' '}\n          <code>state</code> есть - перенаправляем пользователя туда, откуда он\n          пришел. Если <code>state</code> нет - перенаправляем на{' '}\n          <code>/articles</code>, при этом параметр <code>category</code>{' '}\n          назначаем по свойству статьи (если в объекте статьи есть такое\n          свойство).\n        </p>\n        <CopyBlock text={code.code21} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>5. Дополнительные материалы</h2>\n        <ul>\n          <li>\n            <Link\n              link=\"https://tylermcginnis.com/build-your-own-react-router-v4/\"\n              text=\"Build your own React Router v4\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://github.com/reach/router\"\n              text=\"Репозиторий Reach Router\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson07;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n","import React from 'react';\nimport { IoIosInformationCircleOutline } from 'react-icons/io';\nimport { IconContext } from 'react-icons';\n\nconst Alert = ({ children }) => (\n  <IconContext.Provider value={{ size: '2em' }}>\n    <div className=\"alert alert-primary\">\n      <div className=\"icon\">\n        <IoIosInformationCircleOutline />\n      </div>\n      <div className=\"text\">{children}</div>\n    </div>\n  </IconContext.Provider>\n);\n\nexport default Alert;\n"],"sourceRoot":""}