{"version":3,"sources":["pages/Lesson-06/index.js","pages/Lesson-06/code.js","components/Link/index.js"],"names":["Lesson06","className","Link","link","text","theme","hybrid","language","href","target","rel"],"mappings":"2JAwIeA,UAlIE,kBACf,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,uFACA,4lDAOA,4BACE,gUACA,6XAIA,wUAEF,+JAC0B,mDAD1B,UAC2D,IACzD,oDAFF,4QAGmB,qDAHnB,ifAKa,sDALb,oyBASA,iQACkD,IAChD,gDAFF,KAE+B,uCAF/B,IAEkD,uCAFlD,IAEsE,IACpE,4CAHF,4MAIE,kBAACC,EAAA,EAAD,CAAMC,KAAK,uCAAuCC,KAAK,UAJzD,KAMA,kBAAC,IAAD,CAAWA,KCzCD,oBDyCmBC,MAAOC,IAAQC,SAAS,QAErD,yJAC0B,IACxB,kBAACL,EAAA,EAAD,CAAMC,KAAK,6BAA6BC,KAAK,oBAF/C,oZAKE,wCALF,yHAOA,kBAAC,IAAD,CAAWA,KChDD,8tBDgDmBC,MAAOC,IAAQC,SAAS,QAErD,+8BAQJ,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,0IACA,iuBAGS,2CAHT,UAGiC,sCAHjC,oLAIsB,uCAJtB,KAMA,kBAAC,IAAD,CAAWG,KClCD,oaDkCmBC,MAAOC,IAAQC,SAAS,QAErD,0EACW,wCADX,+mBAKA,kBAAC,IAAD,CAAWH,KCjBD,sNDiBmBC,MAAOC,IAAQC,SAAS,QACrD,ulBAGE,kBAACL,EAAA,EAAD,CACEC,KAAK,oDACLC,KAAK,yBALT,OAYJ,yBAAKH,UAAU,OACb,yBAAKA,UAAU,OACb,8HADF,IAEE,k7BAKA,kYACqE,IACnE,yCAFF,seAGiD,2CAHjD,+UAMA,kBAAC,IAAD,CAAWG,KChCD,2dDgCmBC,MAAOC,IAAQC,SAAS,QACrD,qKAC2B,wCAD3B,KAGA,kBAAC,IAAD,CAAWH,KCdD,4XDcmBC,MAAOC,IAAQC,SAAS,UAIzD,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,oLACA,48CAOA,wOACuC,qCADvC,8QAEqC,uCAFrC,IAEyD,IACvD,qCAHF,KAGoB,0CAHpB,qUAMA,kBAAC,IAAD,CAAWG,KClBD,sSDkBmBC,MAAOC,IAAQC,SAAS,QAErD,sWACA,kBAAC,IAAD,CAAWH,KCRD,gfDQmBC,MAAOC,IAAQC,SAAS,a,gCElI7D,oBAQeL,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACX,uBAAGI,KAAML,EAAMM,OAAO,SAASC,IAAI,uBAChCN","file":"static/js/lesson-06.683c9c24.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson06 = () => (\n  <div className=\"container lesson-06\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Работа с REST API</h2>\n        <p>\n          Допустим, уже есть дерево компонентов, которое имеет несколько уровней\n          иерархии и необходимо получить коллекцию элементов от API. Какой\n          именно компонент в иерархии должен отвечать за HTTP-запросы и хранение\n          результата ответа? Если не используем библиотеку управления\n          состоянием, то это зависит от трех критериев.\n        </p>\n        <ul>\n          <li>Каким компонентам будут необходимы полученные данные?</li>\n          <li>\n            Где будет рендерится индикатор загрузки пока выполянется\n            HTTP-запрос?\n          </li>\n          <li>Где будет рендерится сообщение в случае ошибки HTTP-запроса?</li>\n        </ul>\n        <p>\n          Методы жизненного цикла <code>componentDidMount</code> и{' '}\n          <code>componentDidUpdate</code> идеально подходят для HTTP-запросов.\n          Когда вызывается <code>componentDidMount()</code>, компонент уже был\n          отрендерен в DOM и готов к последующему обновлению состояния. Когда\n          вызывается <code>componentDidUpdate()</code>, пропы или состояние\n          компонента изменились, и, возможно, необходимо сделать новый запрос,\n          предварительно сравнив их, чтобы не зациклить рендер компонента.\n        </p>\n        <p>\n          Для HTTP-запроса можно использовать что угодно:{' '}\n          <code>XMLHTTPRequest</code>, <code>fetch</code>,<code>axios</code>,{' '}\n          <code>superagent</code> и т. п. Мы будем использовать библиотеку\n          <Link link=\"https://github.com/axios/axios#axios\" text=\"axios\" />.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Запросы будем делать на{' '}\n          <Link link=\"https://hn.algolia.com/api\" text=\"Hacker News API\" />. По\n          завершению HTTP-запроса сохраняем результат в состоянии компонента. В\n          методе\n          <code>render</code> используем состояние.\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Кроме свойства хранения данных, можно добавить свйоство для хранения\n          флага индикатора загрузки и ошибки. Это позволит сделать использование\n          интерфейса приятнее для пользователя.\n        </p>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Индикатор загрузки</h2>\n        <p>\n          Пока ждем ответа на HTTP-запрос, показываем идтикатор загрузки. Как\n          только пришел ответ, прячем индикатор. Для этого на старте запроса\n          ставим <code>isLoading</code> в<code>true</code>, а при успешном\n          ответе или ошибке в <code>false</code>.\n        </p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          В методе <code>render</code> по условию возвращаем разметку. Если\n          данные загружаеются, показываем лоадер, в противном случае список с\n          результатами.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n        <p>\n          Индикатор загрузки может быть чем угодно, от простого текста или\n          спиннера, до кастомного компонента, например\n          <Link\n            link=\"https://github.com/danilowoz/react-content-loader\"\n            text=\"react-content-loader\"\n          />\n          .\n        </p>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Обработка ошибки</h2>]\n        <p>\n          HTTP-запрос не всегда выполняется без ошибок, поэтому пользователю\n          обязательно нужно дать понять если что-то пошло не так. Для этого в\n          состояние добавляем свойство хранения ошибки.\n        </p>\n        <p>\n          При использовании промисов, для обработки ошибок используется блок{' '}\n          <code>catch()</code>, если он выполнится значит произошла ошибка.\n          Установку индикатора загрузки переносим в блок <code>finally()</code>,\n          чтобы не дублировать код, который будет выполнен в любом случае.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n        <p>\n          Осталось дополнить метод <code>render</code>.\n        </p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Разделение отвественности</h2>\n        <p>\n          Хранить код связанный с HTTP-запросом прямо в компоненте не лучшая\n          практика. В приложении будет много разных запросов на API и\n          использоваться они будут в разных компонентах. К тому же код\n          HTTP-запросов может быть сложным и громоздким. Для удобства\n          рефакторинга будем хранить все в одном месте.\n        </p>\n        <p>\n          Создадим дополнительную папку внутри <code>src</code>. Название папки\n          произвольное но логичное, например <code>utils</code>,{' '}\n          <code>api</code>, <code>services</code> и т. д. В этой папке будем\n          хранить файл с функциями для HTTP-запросов.\n        </p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <p>Импортируем сервис в файле компонента и вызываем нужный метод.</p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson06;\n","export const code1 = `npm install axios`;\n\nexport const code2 = `import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst ArticleList = ({ articles }) => (\n  <ul>\n    {articles.map(({ objectID, url, title }) => (\n      <li key={objectID}>\n        <a href={url} target=\"_blank\" rel=\"noreferrer noopener\">\n          {title}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nclass App extends Component {\n  state = {\n    articles: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get('https://hn.algolia.com/api/v1/search?query=react')\n      .then(response => this.setState({ articles: response.data.hits }));\n  }\n\n  render() {\n    const { articles } = this.state;\n\n    return articles.length > 0 ? <ArticleList articles={articles} /> : null;\n  }\n}`;\n\nexport const code3 = `/* ... */\n\nclass App extends Component {\n  state = {\n    articles: [],\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    axios\n      .get('https://hn.algolia.com/api/v1/search?query=react')\n      .then(response => {\n        this.setState({\n          articles: response.data.hits,\n          isLoading: false,\n        });\n      });\n  }\n\n  /* ... */\n}`;\n\nexport const code4 = `/* ... */\n\nclass App extends Component {\n  /* ... */\n\n  render() {\n    const { articles, isLoading } = this.state;\n\n    return isLoading ? <p>Loading...</p> : <ArticleList articles={articles} />;\n  }\n}`;\n\nexport const code5 = `/* ... */\n\nclass App extends Component {\n  state = {\n    articles: [],\n    isLoading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    axios\n      .get('https://hn.algolia.com/api/v1/search?query=react')\n      .then(response => this.setState({ articles: response.data.hits }))\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  /* ... */\n}`;\n\nexport const code6 = `/* ... */\nclass App extends Component {\n  /* ... */\n  render() {\n    const { articles, isLoading, error } = this.state;\n\n    return (\n      <Fragment>\n        {error && <p>Whoops, something went wrong: {error.message}</p>}\n        {isLoading && <p>Loading...</p>}\n        {articles.length > 0 && <ArticleList articles={articles} />}\n      </Fragment>\n    );\n  }\n}`;\n\nexport const code7 = `// services/articlesApi.js\nimport axios from 'axios';\n\nconst fetchArticlesWithQuery = searchQuery => {\n  return axios\n    .get(\\`https://hn.algolia.com/api/v1/search?query=\\${searchQuery}\\`)\n    .then(response => response.data.hits);\n};\n\nexport default {\n  fetchArticlesWithQuery,\n};`;\n\nexport const code8 = `/* ... */\nimport articlesApi from './path/to/services/articlesApi';\n\nclass App extends Component {\n  state = {\n    articles: [],\n    isLoading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    articlesApi\n      .fetchArticlesWithQuery('react')\n      .then(articles => this.setState({ articles }))\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  /* ... */\n}`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n"],"sourceRoot":""}