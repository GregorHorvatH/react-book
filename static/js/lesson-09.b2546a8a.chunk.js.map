{"version":3,"sources":["pages/Lesson-09/index.js","pages/Lesson-09/code.js","components/Link/index.js","components/Image/index.js","components/Alert/index.js"],"names":["Lesson09","className","Image","filename","text","theme","hybrid","language","Link","link","class","Alert","type","href","target","rel","src","process","alt","loading","children","Provider","value","size"],"mappings":"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","file":"static/js/lesson-09.b2546a8a.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Alert from '../../components/Alert';\nimport Image from '../../components/Image';\nimport Link from '../../components/Link';\n\nimport * as code from './code';\n\nconst Lesson09 = () => (\n  <div className=\"container lesson-09\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Паттерны</h2>\n        <p>\n          В React паттерны различаются по сложности и области применения. От\n          простых, повышающих читабельность, чистоту и однородность кода, до\n          архитектурных, позволяющих повторно использовать логику, повышая\n          поддерживаемость кода. Все библиотеки в экосистеме React используют\n          несколько архитектурных паттернов.\n        </p>\n        <Image filename=\"patterns.png\" />\n\n        <h3>1.1. Higher-Order Component</h3>\n        <p>\n          <code>HOC</code> &#8202;— функция, которая принимает компонент как\n          аргумент и возвращает новый компонент (функцию или класс) с\n          расширенным функционалом.\n        </p>\n        <ul>\n          <li>\n            Применяется когда нужно использовать повторяющуюся логику,\n            применяемую к ряду компонентов, тем самым дополнив их функционал.\n          </li>\n          <li>HOC должен быть чистой функцией без побочных эффектов.</li>\n          <li>\n            HOC нельзя использовать в методе <code>render()</code>. Композиция\n            должна быть статической, то есть во время экспорта компонента.\n          </li>\n        </ul>\n\n        <h4>1.1.1. Создание и использование</h4>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Использование компонента высшего порядка называется{' '}\n          <code>статическая композиция</code>, потому что создание обертки\n          происходит один раз, при экспорте оборачиваемого компонента.\n        </p>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <h4>1.1.2. withLog</h4>\n        <p>HOC который просто логирует все пропсы полученные компонентом.</p>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <h4>1.1.3. withFetch</h4>\n        <p>\n          Такой HOC можно использовать в компонентах где необходимо получить\n          данные от сервера.\n        </p>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Теперь используем с любым компонентом, делая код самого компонента\n          чище и убирая потребность в классе.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <h4>1.1.4. withToggle</h4>\n        <p>HOC позволяющий сделать переключаемым любой компонент.</p>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Получился HOC, который рендерит кнопку для скрытия или отображения\n          контента. А что если мы хотим другой элемент управления? Тогда\n          придется передать состояние\n          <code>isOpen</code> и метод <code>toggle</code> пропсами в{' '}\n          <code>WrappedComponent</code>. Это загрязняет его пропсы и приводит к\n          проблеме которая называется <code>prop collision</code>. В случае\n          когда необходимо рендерить разметку, лучше использовать паттерн{' '}\n          <code>Render Prop</code>.\n        </p>\n\n        <h4>1.1.5. Дополнительные материалы</h4>\n        <ul>\n          <li>\n            <Link\n              link=\"https://ru.reactjs.org/docs/higher-order-components.html\"\n              text=\"Документация по HOC\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://tylermcginnis.com/react-higher-order-components/\"\n              text=\"React Higher-Order Components от Tyler McGinnis\"\n            />\n          </li>\n        </ul>\n\n        <h3>1.2. Render Prop</h3>\n        <p>\n          Как и HOC, позволяет реализовать повторное использование логики. В\n          большинстве случаев эти паттерны взаимозаменяемы. Плюс это отсутствие\n          сайд-эффектов в обёрнутом компоненте. Минус это{' '}\n          <Link\n            link=\"https://medium.com/@ntgard/why-i-dont-use-render-props-in-react-10f18abdff11\"\n            text=\"читабельность кода\"\n          />{' '}\n          при использовании нескольких оберток в одном копоненте. Проблема\n          читабельности в некоторой степени решается такими библиотеками как{' '}\n          <Link\n            link=\"https://github.com/pedronauck/react-adopt\"\n            text=\"react-adopt\"\n          />\n          .\n        </p>\n        <p>\n          Идея использования паттерна заключается в передаче управления рендером\n          другому компоненту, а сам <code>Render Prop</code> отвечает только за\n          состояние и его обновление. Для этого в проп <code>children</code>{' '}\n          передается функция.\n        </p>\n\n        <h4>1.2.1. Toggler</h4>\n        <p>\n          Компонент позволяющий сделать переключаемым любой другой компонент.{' '}\n          <code>\n            <span class=\"token tag\">\n              <span class=\"token tag\">\n                <span class=\"token punctuation\">&lt;</span>Toggler\n              </span>\n              <span class=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          управляет только изменением состояния, а то как это состояние будет\n          использовано его не интересует.\n        </p>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Использование паттерна <code>Render Prop</code> это динамическая\n          композиция.{' '}\n          <code>\n            <span class=\"token tag\">\n              <span class=\"token tag\">\n                <span class=\"token punctuation\">&lt;</span>Toggler\n              </span>\n              <span class=\"token punctuation\">&gt;</span>\n            </span>\n          </code>\n          открывает доступ к состоянию и методу для его изменения. Разработчик\n          может использовать одинаковую логику для разных элементов интерфейса.\n        </p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n\n        <h4>1.2.2. Autocomplete и TagList</h4>\n        <p>\n          Пример повторного использования одной логики фильтрации для создания\n          внешне различных компонентов.\n        </p>\n        <Link\n          link=\"https://codesandbox.io/s/wnvlw82zw8?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <h4>1.2.3. Дополнительные материалы</h4>\n        <ul>\n          <li>\n            <Link\n              link=\"https://youtu.be/BcVAq3YFiuc\"\n              text=\"Michael Jackson - Never Write Another HoC\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://tylermcginnis.com/react-render-props/\"\n              text=\"React Render Props от Tyler McGinnis\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://engineering.dollarshaveclub.com/learn-render-props-by-example-da3e2524dd2e\"\n              text=\"Learn Render Props by Example\"\n            />\n          </li>\n        </ul>\n\n        <h3>1.3. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://youtu.be/0BNgi9vofaw\"\n              text=\"Code Reuse Patterns - Guy Romm\"\n            />\n          </li>\n          <li>\n            <Link link=\"https://react-fns.netlify.com/en/\" text=\"react-fns\" />\n          </li>\n          <li>\n            <Link\n              link=\"https://github.com/acdlite/recompose\"\n              text=\"Репозиторий recompose\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Context API</h2>\n        <p>\n          Данные передаются сверху вниз через пропсы, но это может быть неудобно\n          для определенных типов данных (глобальных), которые требуются многим\n          компонентам на разных уровнях в приложении (локализация, тема\n          оформления, состояние авторизации и др.).\n        </p>\n        <p>\n          Контекст обеспечивает способ передачи данных глубоко по дереву\n          компонентов без необходимости явно передавать пропсы в промежуточные\n          компоненты вручную на каждом уровне.\n        </p>\n        <Alert type=\"error\">\n          <p>\n            Не используйте контекст чтобы избежать передачи пропсов на несколько\n            уровней вниз.\n          </p>\n        </Alert>\n        <Image filename=\"props-context.png\" />\n\n        <h3>2.1. React.createContext()</h3>\n        <CopyBlock text={code.code9} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Создает объект контекста содержащий пару компонентов:{' '}\n            <code>\n              <span class=\"token tag\">\n                <span class=\"token tag\">\n                  <span class=\"token punctuation\">&lt;</span>Context.Provider\n                </span>\n                <span class=\"token punctuation\">&gt;</span>\n              </span>\n            </code>\n            (поставщик) и{' '}\n            <code>\n              <span class=\"token tag\">\n                <span class=\"token tag\">\n                  <span class=\"token punctuation\">&lt;</span>Context.Consumer\n                </span>\n                <span class=\"token punctuation\">&gt;</span>\n              </span>\n            </code>{' '}\n            (потребитель).\n          </li>\n          <li>\n            При рендере, потребитель прочитает текущее значение контекста из\n            ближайшего соответствующего поставщика выше в дереве компонентов.\n          </li>\n          <li>\n            Аргумент <code>defaultValue</code> используется потребителем, если у\n            него нет соответствующего поставщика над ним в дереве.\n          </li>\n        </ul>\n\n        <h4>2.1.1. Свойство displayName</h4>\n        <p>\n          Объекту полученному из функции <code>React.createContext()</code>{' '}\n          можно задать строковое свойство <code>displayName</code>. React\n          DevTools использует это свойство при отображении контекста.\n        </p>\n        <p>\n          К примеру, следующий компонент будет отображаться под именем{' '}\n          <code>ThemeContext</code> в DevTools:\n        </p>\n        <CopyBlock text={code.code10} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.2. Provider</h3>\n        <p>\n          Компонент, позволяющий потребителям подписываться на изменения\n          контекста. Используется для создания и передачи контекста.\n        </p>\n        <CopyBlock text={code.code11} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Принимает проп <code>value</code> - значение контекста, которое\n            будет передано потомкам-потребителям этого контекста.\n          </li>\n          <li>\n            Позволяет потребителям подписываться на изменения контекста\n            независмо от глубины вложености.\n          </li>\n          <li>Один провайдер может быть связан со многими потребителями.</li>\n          <li>Провайдеры могут быть вложены друг в друга.</li>\n        </ul>\n\n        <h3>2.3. Consumer</h3>\n        <p>\n          Компонент, который подписывается на изменения контекста. Получает\n          текущий контекст из ближайшего сопоставимого{' '}\n          <code>\n            <span class=\"token tag\">\n              <span class=\"token tag\">\n                <span class=\"token punctuation\">&lt;</span>Provider\n              </span>\n              <span class=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          выше в дереве.\n        </p>\n        <CopyBlock text={code.code12} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Релизован по патерну <code>Render Prop</code>, поэтому ожидает\n            функцию в качестве дочернего элемента.\n          </li>\n          <li>\n            Параметр <code>context</code>, будет содержать значение контекста\n            ближайшего провайдера для этого контекста выше в дереве.\n          </li>\n          <li>\n            Если для этого контекста нет провайдера, аргумент{' '}\n            <code>context</code> будет содержать значение по умолчанию, которое\n            было передано в <code>React.createContext()</code>.\n          </li>\n          <li>\n            Все потребители, являющиеся потомками провайдера, будут\n            ре-рендериться всякий раз, когда изменяется значение контекста\n            (пропа <code>value</code>).\n          </li>\n          <li>\n            Потребитель обновляется даже тогда, когда компонент-предок выше в\n            дереве отказался ре-рендериваться используя{' '}\n            <code>shouldComponentUpdate()</code>.\n          </li>\n        </ul>\n\n        <h3>2.4. Контекст темы</h3>\n        <CopyBlock text={code.code13} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.5. HOC для подписки на контекст</h3>\n        <p>\n          Чаще всего контекст потребляется многими компонентами, и явно\n          оборачивать каждый компонент с помощью{' '}\n          <code>\n            <span class=\"token tag\">\n              <span class=\"token tag\">\n                <span class=\"token punctuation\">&lt;</span>Context.Consumer\n              </span>\n              <span class=\"token punctuation\">&gt;</span>\n            </span>\n          </code>{' '}\n          не лучший подход. Создадим компонент высшего порядка для подписки на\n          контекст.\n        </p>\n        <CopyBlock text={code.code14} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Теперь любой компонент, который зависит от контекста темы, может легко\n          подписаться на него с помощью созданной нами функции{' '}\n          <code>withTheme</code>.\n        </p>\n        <CopyBlock text={code.code15} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.6. Производительность</h3>\n        <p>\n          Поскольку контекст использует ссылочную идентификацию, чтобы\n          определить, когда нужно проводить ре-рендер, существуют некоторые\n          подводные камни, которые могут вызвать лишние отрисовки в\n          потребителях, когда ре-рендерится родитель провайдера.\n        </p>\n        <p>\n          Например, приведенный ниже код будет повторно отрисовывать всех\n          потребителей каждый раз, когда обновляется родитель провайдера, потому\n          что для <code>value</code> всегда создается новый объект (новая\n          ссылка).\n        </p>\n        <CopyBlock text={code.code16} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Лучший вариант решения этой проблемы - создать отдельный компонент\n          полностью инкапсулирующий всю логику создания и управления контекстом.\n          Методы класса так же необходимо поместить в состояние и передавать\n          ссылку на него, тогда ре-рендер потребителей будет происходить только\n          тогда, когда изменится состояние провайдера.\n        </p>\n        <CopyBlock text={code.code17} theme={hybrid} language=\"jsx\" />\n\n        <h3>2.7. Пример локализации статьи</h3>\n        <p>\n          Локализация делается при помощи таких библиотек как{' '}\n          <Link\n            link=\"https://github.com/formatjs/react-intl\"\n            text=\"react-intl\"\n          />{' '}\n          или{' '}\n          <Link\n            link=\"https://github.com/i18next/react-i18next\"\n            text=\"react-i18next\"\n          />\n          , которые используют контекст. По примере приведен пример локализации\n          статьи с использованием контекста.\n        </p>\n        <Link\n          link=\"https://codesandbox.io/s/jlk5k0rvow?from-embed\"\n          text=\"CodeSandbox\"\n        />\n\n        <h3>2.8. Дополнительные материалы</h3>\n        <ul>\n          <li>\n            <Link\n              link=\"https://ru.reactjs.org/docs/context.html\"\n              text=\"Документация на reactjs.org\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://itnext.io/understanding-the-react-context-api-through-building-a-shared-snackbar-for-in-app-notifications-6c199446b80c\"\n              text=\"Learn the React Context API with a Practical Example You Can Bring to Your Apps\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://blog.bitsrc.io/why-you-should-consider-the-new-context-api-in-react-a-deep-dive-d588b66c57b5\"\n              text=\"Why you should consider the new Context API in\n              React?&#8202;—&#8202;A deep dive\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://medium.com/@rossbulat/react-dark-mode-with-styled-theming-and-context-57557de6400\"\n              text=\"React Dark Mode with Styled Theming and Context\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://medium.com/@jishnu61/6-easy-steps-to-localize-your-react-application-internationalization-with-i18next-8de9cc3a66a1\"\n              text=\"6 easy steps to localize your React Application — Internationalization with i18next\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://www.freecodecamp.org/news/setting-up-internationalization-in-react-from-start-to-finish-6cb94a7af725/\"\n              text=\"How to set up Internationalization in React from start to finish\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson09;\n","export const code1 = `// withHigherOrderComponent.js\nimport React, { Component } from 'react';\n\nconst withHigherOrderComponent = WrappedComponent => {\n  return class WithHigherOrderComponent extends Component {\n    render() {\n      return (\n        <WrappedComponent {...this.props} extraProp=\"This prop is from HOC\" />\n      );\n    }\n  };\n};\n\nexport default withHigherOrderComponent;`;\n\nexport const code2 = `// MyComponent.js\nimport React from 'react';\nimport withHigherOrderComponent from '/path/to/withHigherOrderComponent';\n\nconst MyComponent = props => <div>{JSON.stringify(props, null, 2)}</div>;\n\nexport default withHigherOrderComponent(MyComponent);`;\n\nexport const code3 = `const withLog = WrappedComponent => {\n  return class WithLog extends Component {\n    componentDidMount() {\n      console.group(\\`WithLog ouput @\\${WrappedComponent.name}\\`);\n      console.log(this.props);\n      console.groupEnd();\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n};`;\n\nexport const code4 = `// withFetch.js\nconst withFetch = url => WrappedComponent => {\n  return class WithFetch extends Component {\n    state = {\n      data: [],\n      loading: false,\n      error: null,\n    };\n\n    componentDidMount() {\n      this.setState({ loading: true });\n\n      fetch(url)\n        .then(res => res.json())\n        .then(data => this.setState({ data }))\n        .catch(error => this.setState({ error }))\n        .finally(() => this.setState({ loading: false }));\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  };\n};\n\nexport default withFetch;`;\n\nexport const code5 = `// App.js\nconst App = props => {\n  return <h1>В моих пропсах будут data, loading и error</h1>;\n};\n\nexport default withFetch('https://jsonplaceholder.typicode.com/todos')(App);`;\n\nexport const code6 = `const withToggle = WrappedComponent => {\n  return class WithToggle extends Component {\n    state = {\n      isOpen: false,\n    };\n\n    toggle = () => this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n\n    render() {\n      return (\n        <>\n          <button type=\"button\" onClick={this.toggle}>\n            {this.state.isOpen ? 'Hide' : 'Show'}\n          </button>\n\n          {isOpen && <WrappedComponent {...this.props} />}\n        </>\n      );\n    }\n  };\n};`;\n\nexport const code7 = `// Toggler.js\nclass Toggler extends Component {\n  state = {\n    isOpen: false,\n  };\n\n  toggle = () => this.setState(state => ({ isOpen: !state.isOpen }));\n\n  render() {\n    return this.props.children({\n      isOpen: this.state.isOpen,\n      onToggle: this.toggle,\n    });\n  }\n}\n\nexport default Toggler;`;\n\nexport const code8 = `// App.js\nconst App = () => (\n  <div>\n    <Toggler>\n      {({ isOpen, onToggle }) => (\n        <>\n          <button type=\"button\" onClick={onToggle}>\n            {isOpen ? 'Hide' : 'Show'}\n          </button>\n          {isOpen && <p>Vestibulum suscipit nulla quis orci.</p>}\n        </>\n      )}\n    </Toggler>\n\n    <Toggler>\n      {({ isOpen, onToggle }) => (\n        <>\n          <label>\n            <input type=\"checkbox\" checked={isOpen} onChange={onToggle} />\n            {isOpen ? 'Hide' : 'Show'}\n          </label>\n          {isOpen && <p>Etiam feugiat lorem non metus.</p>}\n        </>\n      )}\n    </Toggler>\n  </div>\n);`;\n\nexport const code9 = `const Context = React.createContext(defaultValue);`;\n\nexport const code10 = `const ThemeContext = React.createContext();\nThemeContext.displayName = 'ThemeContext';\n\n<ThemeContext.Provider> // \"ThemeContext.Provider\" в DevTools\n<ThemeContext.Consumer> // \"ThemeContext.Consumer\" в DevTools`;\n\nexport const code11 = `<Provider value={/* value */}>`;\n\nexport const code12 = `<Consumer>\n  {context => {\n    /* Возвращает JSX-разметку */\n  }}\n</Consumer>`;\n\nexport const code13 = `import React, { createContext } from 'react';\n\nconst ThemeContext = createContext();\n\nconst App = () => (\n  <ThemeContext.Provider value=\"light\">\n    <div className=\"App\">\n      <Toolbar />\n    </div>\n  </ThemeContext.Provider>\n);\n\nconst Toolbar = () => (\n  <div className=\"Toolbar\">\n    <Button label=\"Log In\" />\n    <Button label=\"Log Out\" />\n  </div>\n);\n\nconst Button = ({ label }) => (\n  <ThemeContext.Consumer>\n    {theme => (\n      <button\n        className={theme === 'light' ? 'btn-light' : 'btn-dark'}\n        type=\"button\"\n      >\n        {label}\n      </button>\n    )}\n  </ThemeContext.Consumer>\n);`;\n\nexport const code14 = `// withTheme.js\nimport ThemeContext from '/path/to/ThemeContext';\n\n// Эта функция принимает компонент...\nconst withTheme = WrappedComponent => {\n  // ... возвращает другой компонент...\n  return function WithTheme(props) {\n    // ... который рендерит обернутый в Consumer компонент,\n    // передавая тему как проп.\n    return (\n      <ThemeContext.Consumer>\n        {theme => <WrappedComponent {...props} theme={theme} />}\n      </ThemeContext.Consumer>\n    );\n  };\n};\n\nexport default withTheme;`;\n\nexport const code15 = `import withTheme from '/path/to/withTheme';\n\nconst Button = ({ label, theme }) => (\n  <button className={theme === 'dark' ? 'btn-dark' : 'btn-light'} type=\"button\">\n    {label}\n  </button>\n);\n\nexport default withTheme(Button);`;\n\nexport const code16 = `class App extends React.Component {\n  render() {\n    return (\n      <Provider value={{ something: 'some value' }}>\n        <Toolbar />\n      </Provider>\n    );\n  }\n}`;\n\nexport const code17 = `// ThemeContextProvider.js\nimport React, { Component, createContext } from 'react';\n\nconst { Provider, Consumer } = createContext();\n\nexport default class ThemeContextProvider extends Component {\n  static Consumer = Consumer;\n\n  toggleTheme = () => {\n    this.setState(state => ({\n      theme: state.theme === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  state = {\n    theme: 'light',\n    toggleTheme: this.toggleTheme,\n  };\n\n  render() {\n    return <Provider value={this.state}>{this.props.children}</Provider>;\n  }\n}`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n","import React from 'react';\nimport { IoIosInformationCircleOutline } from 'react-icons/io';\nimport { IconContext } from 'react-icons';\n\nconst Alert = ({ children }) => (\n  <IconContext.Provider value={{ size: '2em' }}>\n    <div className=\"alert alert-primary\">\n      <div className=\"icon\">\n        <IoIosInformationCircleOutline />\n      </div>\n      <div className=\"text\">{children}</div>\n    </div>\n  </IconContext.Provider>\n);\n\nexport default Alert;\n"],"sourceRoot":""}