{"version":3,"sources":["pages/Lesson-05/index.js","pages/Lesson-05/code.js","components/Link/index.js","components/Image/index.js"],"names":["Lesson05","className","Link","link","text","Image","filename","theme","hybrid","language","href","target","rel","src","process","alt","loading"],"mappings":"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","file":"static/js/lesson-05.a93606b0.chunk.js","sourcesContent":["import React from 'react';\nimport { CopyBlock, hybrid } from 'react-code-blocks';\nimport Link from '../../components/Link';\nimport Image from '../../components/Image';\n\nimport * as code from './code';\n\nconst Lesson05 = () => (\n  <div className=\"container lesson-05\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>1. Жизненный цикл компонента</h2>\n        <p>\n          Существует несколько стадий жизненного цикла, каждый из которых\n          вызывает для компонента методы наследуемые от{' '}\n          <code>React.Component</code>. Мы можем переопределить их поведение\n          добавив необходимый функционал, в рамках установленных правил.\n        </p>\n        <Link\n          link=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"\n          text=\"Интерактивная диаграмма жизненного цикла\"\n        />\n\n        <p>Компонент с объявленными методами жизненного цикла.</p>\n        <Image filename=\"lifecycle_code.jpg\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>2. Стадия монтирования</h2>\n        <p>\n          Следующие методы вызываются когда создается экземпляр компонента и\n          добавляется в DOM.\n        </p>\n        <CopyBlock text={code.code1} theme={hybrid} language=\"jsx\" />\n\n        <p>\n          Вызывается в момент создания экземпляра компонента, до того как\n          компонент будет помещен в DOM.\n        </p>\n        <ul>\n          <li>Инициализирует начальное состояние компонента</li>\n          <li>Привязывает контекст в методах</li>\n          <li>\n            Нельзя вызывать <code>setState()</code>\n          </li>\n          <li>В большинстве случаев явное указание конструтора излишне</li>\n        </ul>\n        <CopyBlock text={code.code2} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Вызывается перед <code>render()</code>, при монтировании и перед\n            всеми последующими вызовами <code>render</code>, тоесть после\n            обновления <code>state</code> или <code>props</code>.\n          </li>\n          <li>\n            Можно использовать для того чтобы установить <code>state</code> в\n            зависимости от <code>props</code>\n            при каждом их изменении.\n          </li>\n          <li>\n            Должен вернуть объект, которым будет обновлено состояние, или{' '}\n            <code>null</code> если ничего обновлять не нужно.\n          </li>\n          <li>\n            Нут доступа к <code>this</code>\n          </li>\n        </ul>\n        <CopyBlock text={code.code3} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Позволяет декларативно описать интерфейс</li>\n          <li>Возвращает результат JSX-выражений, поддерево Virtual DOM</li>\n          <li>\n            Нельзя вызывать <code>setState()</code>\n          </li>\n        </ul>\n        <CopyBlock text={code.code4} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Вызывается сразу после монтирования в DOM</li>\n          <li>\n            Делаем HTTP-запросы, вешаем кастомные слушатели событий и делаем\n            операции с DOM\n          </li>\n          <li>\n            Вызов <code>setState()</code> в этом методе, вызовет ре-рендер - это\n            нормально\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>3. Стадия обновления</h2>\n        <p>\n          Обновление может быть вызвано измением <code>state</code> самого\n          компонента или передаваемых ему <code>props</code>. При обновлении\n          необходимо перерендерить компонент, что ведет к вызову следующих\n          методов.\n        </p>\n        <CopyBlock text={code.code5} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Не вызывается при инициализации компонента</li>\n          <li>Вызывается перед ре-рендером уже существующего компонента</li>\n          <li>Необходим исключительно для оптимизации процесса рендера</li>\n          <li>\n            По умолчанию <code>render</code> происходит каждый раз при новых{' '}\n            <code>props</code> или <code>state</code>\n          </li>\n          <li>\n            Позволяет сравнить текущие и предыдущие <code>state</code> и{' '}\n            <code>props</code>, вернув <code>true</code> или\n            <code>false</code> указывая React есть ли необходимость обновлять\n            компонент\n          </li>\n          <li>\n            Если вернет <code>false</code> то не произойдет{' '}\n            <code>render()</code> и <code>componentDidUpdate()</code>\n          </li>\n          <li>\n            Нельзя вызывать <code>setState()</code>\n          </li>\n          <li>\n            Использовать необходимо очень аккуратно, только после замеров\n            производительности, в противном случае может привести к обратному\n            эффекту\n          </li>\n          <li>\n            Возможно стоит заменить на <code>React.PureComponent</code>, который\n            будет делать поверхностное сравнение <code>props</code>. Но только\n            после замеров производительности\n          </li>\n        </ul>\n        <CopyBlock text={code.code6} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>\n            Вызывается перед тем, как все изменения готовы к добавлению в DOM\n          </li>\n          <li>\n            Можно использовать для получения DOM-значений перед обновлением, к\n            примеру текущую позицию скрола\n          </li>\n          <li>\n            То что вернет этот метод, будет передано как третий параметр в\n            <code>componentDidUpdate()</code>\n          </li>\n        </ul>\n        <CopyBlock text={code.code7} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Вызывается сразу после обновления компонента</li>\n          <li>Не вызывается при первоначальном рендере компонента</li>\n          <li>\n            Можно вызывать <code>setState()</code>, обязательно обернув его в\n            условие проверки изменения предыдущих и следующих <code>props</code>{' '}\n            и <code>state</code>, чтобы не возник бесконечный цикл.\n          </li>\n          <li>Можно делать HTTP-запросы</li>\n          <li>Можно передавать сторонним библиотекам новые данные</li>\n          <li>\n            Если в компоненте есть <code>getSnapshotBeforeUpdate()</code>, то\n            значение возвращаемое им будет передано третим аргументом{' '}\n            <code>snapshot</code>, в противном случае его значением будет{' '}\n            <code>undefined</code>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>4. Стадия размонтирования</h2>\n        <p>\n          В какой-то момент компоненты будут удалены из DOM. При этом вызывается\n          следующий метод.\n        </p>\n        <CopyBlock text={code.code8} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Вызывается перед размонтированием и удалением элемента из DOM</li>\n          <li>\n            Отлично подходим для уборки за собой: слушатели, таймеры,\n            HTTP-запросы. В противном случае будут утечки памяти\n          </li>\n          <li>\n            Вызывать <code>setState()</code> нет смысла, компонент никогда не\n            перерендерится\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>5. Обработка ошибок рендера</h2>\n        <p>\n          React очень любит класть все приложение при любой ошибке. Метод\n          <code>componentDidCatch</code> срабатывает при ошибке в дочернем\n          компоненте и позволяет родительским компонентам отлавливать ошибки в\n          детях, отображая запасной интерфейс. В результате, при ошибке,\n          интерфейс не падает.\n        </p>\n        <CopyBlock text={code.code9} theme={hybrid} language=\"jsx\" />\n\n        <ul>\n          <li>Используется для контроля ошибок</li>\n          <li>Ловит ошибки только в детях, но не в самом родителе</li>\n          <li>\n            <code>error</code> - результат <code>toString()</code> объекта\n            ошибки\n          </li>\n          <li>\n            <code>info</code> - объект описывающий stack trace\n          </li>\n        </ul>\n        <CopyBlock text={code.code10} theme={hybrid} language=\"jsx\" />\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2>6. Дополнительные материалы</h2>\n        <ul>\n          <li>\n            <Link\n              link=\"https://ru.reactjs.org/docs/react-component.html#the-component-lifecycle\"\n              text=\"Документация - Жизненный цикл компонента\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\"\n              text=\"Error Handling in React 16+\"\n            />\n          </li>\n          <li>\n            <Link\n              link=\"https://cy6eria.ru/posts/5\"\n              text=\"Статья о getDerivedStateFromProps\"\n            />\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Lesson05;\n","export const code1 = `constructor() {}`;\n\nexport const code2 = `static getDerivedStateFromProps(nextProps, prevState) {}`;\n\nexport const code3 = `render() {}`;\n\nexport const code4 = `componentDidMount() {}`;\n\nexport const code5 = `shouldComponentUpdate(nextProps, nextState) {}`;\n\nexport const code6 = `getSnapshotBeforeUpdate(prevProps, prevState) {}`;\n\nexport const code7 = `componentDidUpdate(prevProps, prevState, snapshot) {}`;\n\nexport const code8 = `componentWillUnmount() {}`;\n\nexport const code9 = `componentDidCatch(error, info) {}`;\n\nexport const code10 = `class ErrorBoundary extends React.Component {\n  state = { hasError: false };\n\n  componentDidCatch(error, info) {\n    // Если метод был вызван значит есть ошибка!\n    // Устанавливаем состояние\n    this.setState({ hasError: true });\n    // Также можно отправить отчет об ошибке вашему аналитическому сервису\n    // logErrorToMyService(error, info);\n  }\n\n  render() {\n    // Если есть ошибка...\n    if (this.state.hasError) {\n      // Рендерим fallback UI\n      return <h1>Something went wrong, please try again later :(</h1>;\n    }\n\n    // Если все ок, рендерим детей\n    return this.props.children;\n  }\n}`;\n","import React from 'react';\n\nconst Link = ({ link, text }) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\n\nconst Image = ({ filename }) => (\n  <img\n    src={process.env.PUBLIC_URL + '/images/' + filename}\n    className=\"img-fluid mx-auto d-block\"\n    alt=\"screenshot\"\n    loading=\"lazy\"\n  />\n);\n\nexport default Image;\n"],"sourceRoot":""}